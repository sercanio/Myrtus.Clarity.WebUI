{
  "file_tree": [
    "WebUI/",
    "    eslint.config.js",
    "    vite.config.ts",
    "    components/",
    "        SideMenu.tsx",
    "    nginx/",
    "    src/",
    "        App.tsx",
    "        env.d.ts",
    "        main.tsx",
    "        vite-env.d.ts",
    "        assets/",
    "        components/",
    "            AuthCallback.tsx",
    "            Footer.tsx",
    "            ForbiddenAccess.tsx",
    "            FormattedDate.tsx",
    "            Header.tsx",
    "            LoadingScreen.tsx",
    "            Login.tsx",
    "            NotificationBell.tsx",
    "            ProtectedRoute.tsx",
    "            Sidebar.tsx",
    "        config/",
    "        constants/",
    "            role.ts",
    "        contexts/",
    "            MessageContext.ts",
    "        features/",
    "            auditLogs/",
    "                components/",
    "                    AuditLogSearchFilters.tsx",
    "                    AuditLogsList.tsx",
    "            auth/",
    "                components/",
    "            roles/",
    "                components/",
    "                    RolesManagement.tsx",
    "            users/",
    "                components/",
    "                    EditUserModal.tsx",
    "                    RegisterUserModal.tsx",
    "                    UserSearchFilters.tsx",
    "                    UsersTable.tsx",
    "        hooks/",
    "            useLocalStorage.ts",
    "            useMessage.ts",
    "        pages/",
    "            ActivityMonitor.tsx",
    "            AuditLogs.tsx",
    "            Home.tsx",
    "            Landing.tsx",
    "            LoginPage.tsx",
    "            Profile.tsx",
    "            Roles.tsx",
    "            Settings.tsx",
    "            Users.tsx",
    "        routes/",
    "            index.tsx",
    "        services/",
    "            api.ts",
    "            msalService.ts",
    "        store/",
    "            api.ts",
    "            hooks.ts",
    "            index.ts",
    "            services/",
    "                accountApi.ts",
    "                auditLogApi.ts",
    "                permissionApi.ts",
    "                roleApi.ts",
    "                userApi.ts",
    "            slices/",
    "                authSlice.ts",
    "                uiSlice.ts",
    "        types/",
    "            ExtendedRouteObject.ts",
    "            auditLog.ts",
    "            dynamicQuery.ts",
    "            errorResponse.ts",
    "            loginRequest.ts",
    "            notification.ts",
    "            paginatedResponse.ts",
    "            permission.ts",
    "            registerUser.ts",
    "            role.ts",
    "            user.ts",
    "            valueObject.ts",
    "        utils/",
    "            dateFormatter.ts",
    "            formatSize.ts"
  ],
  "files": [
    {
      "path": "eslint.config.js",
      "content": "import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport tseslint from 'typescript-eslint'\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  },\n)\n"
    },
    {
      "path": "vite.config.ts",
      "content": "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react-swc'\nimport * as path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\n// https://vite.dev/config/\nexport default defineConfig({\n  build: {\n    target: 'esnext',\n  },\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './'),\n      '@src': path.resolve(__dirname, './src'),\n      '@components': path.resolve(__dirname, './src/components'),\n      '@/types': path.resolve(__dirname, './src/types'),\n      '@utils': path.resolve(__dirname, './src/utils'),\n      '@hooks': path.resolve(__dirname, './src/hooks'),\n      '@store': path.resolve(__dirname, './src/store'),\n      '@features': path.resolve(__dirname, './src/features'),\n      '@assets': path.resolve(__dirname, './src/assets'),\n      '@styles': path.resolve(__dirname, './src/styles'),\n      '@services': path.resolve(__dirname, './src/services'),\n      '@pages': path.resolve(__dirname, './src/pages'),\n      '@config': path.resolve(__dirname, './src/config'),\n      '@contexts': path.resolve(__dirname, './src/contexts'),\n      '@constants': path.resolve(__dirname, './src/constants'),\n    },\n  },\n})\n"
    },
    {
      "path": "components\\SideMenu.tsx",
      "content": "import React from 'react';\nimport { Menu } from 'antd';\nimport { UserOutlined, TeamOutlined } from '@ant-design/icons';\nimport type { MenuProps } from 'antd';\n\nconst items: MenuProps['items'] = [\n    {\n        key: 'user-management',\n        icon: <UserOutlined />,\n        label: 'User Management',\n        children: [\n            {\n                key: 'users',\n                icon: <TeamOutlined />,\n                label: 'Users',\n            },\n            {\n                key: 'roles',\n                icon: <TeamOutlined />,\n                label: 'Roles',\n            },\n        ],\n    },\n];\n\nconst SideMenu: React.FC = () => {\n    const onClick: MenuProps['onClick'] = (e) => {\n        console.log('clicked ', e);\n    };\n\n    return (\n        <Menu\n            onClick={onClick}\n            mode=\"inline\"\n            defaultSelectedKeys={['users']}\n            defaultOpenKeys={['user-management']}\n            style={{ width: \"100%\" }}\n            items={items}\n        />\n    );\n};\n\nexport default SideMenu; "
    },
    {
      "path": "src\\App.tsx",
      "content": "import { useState, useEffect } from 'react';\nimport { Layout, Grid, ConfigProvider, theme } from 'antd';\nimport { BrowserRouter } from 'react-router-dom';\nimport Sidebar from '@components/Sidebar';\nimport Header from '@components/Header';\nimport Footer from '@components/Footer';\nimport AppRoutes from './routes';\nimport useLocalStorage from '@hooks/useLocalStorage';\nimport useMessage from '@hooks/useMessage';\nimport { MessageContext } from '@contexts/MessageContext';\nimport axios from 'axios';\n\n// Import our RTK Query hook and Redux dispatch and our loginSuccess action\nimport { useGetCurrentUserQuery } from '@store/services/accountApi';\nimport { useAppDispatch } from '@store/hooks';\nimport { loginSuccess } from '@store/slices/authSlice';\n\nconst { Content } = Layout;\nconst { useBreakpoint } = Grid;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useLocalStorage('theme-preference', false);\n  const screens = useBreakpoint();\n  const { messageApi, contextHolder } = useMessage();\n  const dispatch = useAppDispatch();\n\n  // RTK Query automatically sends credentials so your cookie session will be maintained\n  const { data: currentUser, isFetching: isUserFetching } = useGetCurrentUserQuery();\n\n  useEffect(() => {\n    if (currentUser && !isUserFetching) {\n      dispatch(\n        loginSuccess({\n          account: currentUser,\n          accessToken: '', // not used because auth is managed with cookies\n        })\n      );\n    }\n  }, [currentUser, isUserFetching, dispatch]);\n\n  useEffect(() => {\n    async function fetchAndStoreXsrfToken() {\n      try {\n        const response = await axios.get(\n          `${import.meta.env.VITE_API_BASE_URL}/Security/antiforgery/token`,\n          { withCredentials: true }\n        );\n        const { token } = response.data;\n        localStorage.setItem('xsrfToken', token);\n      } catch (error) {\n        console.error('Failed to fetch antiforgery token:', error);\n      }\n    }\n    fetchAndStoreXsrfToken();\n  }, []);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if ((event.ctrlKey || event.metaKey) && event.key.toLocaleLowerCase() === 'b') {\n        event.preventDefault();\n        setCollapsed((prev) => !prev);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, []);\n\n  useEffect(() => {\n    if (screens.xs) {\n      setCollapsed(true);\n    }\n  }, [screens]);\n\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={{ algorithm: isDarkMode ? theme.darkAlgorithm : theme.defaultAlgorithm }}>\n        <MessageContext.Provider value={messageApi}>\n          {contextHolder}\n          <div style={{ minHeight: '100vh', background: isDarkMode ? '#141414' : '#fff' }}>\n            <Layout style={{ minHeight: '100vh', maxWidth: 1920, margin: '0 auto' }}>\n              <Sidebar collapsed={collapsed} setCollapsed={setCollapsed} />\n              <Layout>\n                <Header\n                  collapsed={collapsed}\n                  setCollapsed={setCollapsed}\n                  isDarkMode={isDarkMode}\n                  setDarkMode={setIsDarkMode}\n                />\n                <Content\n                  style={{\n                    margin: screens.xs ? '12px 2px' : '24px 16px',\n                    padding: screens.xs ? '12px 2px' : 24,\n                    background: isDarkMode ? '#141414' : '#fff',\n                    minHeight: 280,\n                  }}\n                >\n                  <AppRoutes />\n                </Content>\n                <Footer />\n              </Layout>\n            </Layout>\n          </div>\n        </MessageContext.Provider>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"
    },
    {
      "path": "src\\env.d.ts",
      "content": "/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_KEYCLOAK_REALM: string\n  readonly VITE_KEYCLOAK_CLIENT_ID: string\n  readonly VITE_KEYCLOAK_CLIENT_SECRET: string\n  readonly VITE_KEYCLOAK_BASE_URL: string\n  readonly VITE_APP_BASE_URL: string\n  readonly VITE_KEYCLOAK_SCOPE?: string\n  readonly VITE_KEYCLOAK_RESPONSE_TYPE?: string\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n} "
    },
    {
      "path": "src\\main.tsx",
      "content": "import { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"
    },
    {
      "path": "src\\vite-env.d.ts",
      "content": "/// <reference types=\"vite/client\" />\n"
    },
    {
      "path": "src\\components\\AuthCallback.tsx",
      "content": "import { Layout, Typography } from \"antd\";\n\nexport const AuthCallback = () => {\n  return (\n    <Layout style={{ backgroundColor: 'transparent' }}>\n      <Layout.Content>\n        <Typography.Title level={2}>Authentication</Typography.Title>\n        <Typography.Paragraph>\n          You should be redirected here after logging in.\n        </Typography.Paragraph>\n      </Layout.Content>\n    </Layout>\n  );\n}"
    },
    {
      "path": "src\\components\\Footer.tsx",
      "content": "import { Layout } from 'antd';\n\nconst { Footer: AntFooter } = Layout;\n\nfunction Footer() {\n  return (\n    <AntFooter style={{ textAlign: 'center' }}>\n      ©{new Date().getFullYear()} DenemeApp29 Clarity. All Rights Reserved.\n    </AntFooter>\n  );\n}\n\nexport default Footer;"
    },
    {
      "path": "src\\components\\ForbiddenAccess.tsx",
      "content": "import { RootState } from '@store/index';\nimport { Result, Button } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nconst ForbiddenAccess = () => {\n  const navigate = useNavigate();\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n\n  return (\n    <>\n      {!isAuthenticated && (\n        <Result\n          status=\"403\"\n          title=\"403\"\n          subTitle=\"Sorry, you are not authorized to access this page.\"\n          extra={\n            <Button type=\"primary\" onClick={() => navigate('/')}>\n              Back Home\n            </Button>\n          }\n        />)}\n    </>\n  );\n};\n\nexport default ForbiddenAccess;\n"
    },
    {
      "path": "src\\components\\FormattedDate.tsx",
      "content": "import React from 'react';\nimport { formatDate } from '@utils/dateFormatter';\nimport { Typography } from 'antd';\n\ninterface FormattedDateProps {\n  date: Date | string;\n  dateFormat?: string;\n}\n\nconst FormattedDate: React.FC<FormattedDateProps> = ({ date, dateFormat = 'yyyy-MM-dd HH:mm:ss' }) => {\n  return (\n    <Typography.Text\n      type=\"secondary\">\n      {formatDate(date, dateFormat)}\n    </Typography.Text>\n  )\n};\n\nexport default FormattedDate;"
    },
    {
      "path": "src\\components\\Header.tsx",
      "content": "import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Layout, Avatar, Dropdown, Switch, Space, Tag, Button, Typography } from 'antd';\nimport type { MenuProps } from 'antd';\nimport {\n  UserOutlined,\n  SettingOutlined,\n  LogoutOutlined,\n  LoginOutlined,\n  BulbOutlined,\n  BulbFilled,\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n} from '@ant-design/icons';\nimport { useAppDispatch } from '@store/hooks';\nimport NotificationBell from '@components/NotificationBell';\nimport { useLazyGetCurrentUserQuery, useLogoutMutation } from '@store/services/accountApi';\nimport { logoutSuccess } from '@store/slices/authSlice';\nimport { api } from '@store/api';\nimport type { RootState } from '@store/index';\n\nconst { Header: AntHeader } = Layout;\n\ninterface HeaderProps {\n  isDarkMode: boolean;\n  setDarkMode: (value: boolean) => void;\n  collapsed: boolean;\n  setCollapsed: (value: boolean) => void;\n}\n\nconst Header = ({ isDarkMode, setDarkMode, collapsed, setCollapsed }: HeaderProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { isAuthenticated, user } = useSelector((state: RootState) => state.auth);\n  const [isXLScreen, setIsXLScreen] = useState(window.innerWidth >= 1200);\n  const [triggerGetCurrentUser, { data: userProfile }] = useLazyGetCurrentUserQuery();\n  const [logout] = useLogoutMutation();\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsXLScreen(window.innerWidth >= 1200);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const handleLogin = () => {\n    navigate('/login');\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout().unwrap();\n      dispatch(logoutSuccess());\n      dispatch(api.util.invalidateTags(['Sessions']));\n      navigate('/login');\n      // window.location.reload();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const userMenuItems: MenuProps['items'] = [\n    {\n      key: 'user-info',\n      label: (\n        <div style={{ padding: '4px 0' }}>\n          <Typography.Text strong>\n            {userProfile?.userName || user?.userName}\n          </Typography.Text>\n          <br />\n          <Typography.Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            {userProfile?.email?.toString() || user?.email?.toString()}\n          </Typography.Text>\n        </div>\n      ),\n      disabled: true,\n    },\n    { type: 'divider' },\n    {\n      key: 'profile',\n      icon: <UserOutlined />,\n      label: 'Profile',\n      onClick: () => navigate('/profile'),\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: 'Settings',\n      onClick: () => navigate('/settings'),\n    },\n    { type: 'divider' },\n    {\n      key: 'logout',\n      icon: <LogoutOutlined />,\n      label: 'Logout',\n      onClick: handleLogout,\n      danger: true,\n    },\n  ];\n\n  const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n  const modifierKey = isMac ? '⌘' : 'Ctrl';\n\n  return (\n    <AntHeader style={{ padding: '0 24px', background: isDarkMode ? '#141414' : '#fff' }}>\n      <Space style={{ justifyContent: 'space-between', width: '100%' }}>\n        <Space>\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n            onClick: () => setCollapsed(!collapsed),\n            style: { fontSize: '16px', cursor: 'pointer' },\n          })}\n          {isXLScreen && <Tag color=\"cyan\">{modifierKey} + B</Tag>}\n        </Space>\n        <Space align=\"center\">\n          <Switch\n            checkedChildren={<BulbOutlined />}\n            unCheckedChildren={<BulbFilled />}\n            checked={isDarkMode}\n            onChange={setDarkMode}\n          />\n          {isAuthenticated ? (\n            <Dropdown menu={{ items: userMenuItems }} trigger={['hover']} placement=\"bottomLeft\">\n              <Space align=\"center\" style={{ cursor: 'pointer' }}>\n                <Avatar size=\"large\" src={user?.avatarUrl} icon={!user?.avatarUrl && <UserOutlined />} />\n                <Typography.Text strong>{user?.userName}</Typography.Text>\n              </Space>\n            </Dropdown>\n          ) : (\n            <Button type=\"primary\" icon={<LoginOutlined />} onClick={handleLogin}>\n              Login\n            </Button>\n          )}\n          <NotificationBell />\n        </Space>\n      </Space>\n    </AntHeader>\n  );\n};\n\nexport default Header;\n"
    },
    {
      "path": "src\\components\\LoadingScreen.tsx",
      "content": "import { Spin } from 'antd';\nimport { Flex } from 'antd';\n\nconst LoadingScreen = () => {\n  return (\n    <Flex align=\"center\" justify=\"center\" style={{ height: '100%' }}>\n      <Spin size=\"large\" />\n    </Flex>\n  );\n};\n\nexport default LoadingScreen;\n"
    },
    {
      "path": "src\\components\\Login.tsx",
      "content": "// src/components/Login.tsx\nimport React from 'react';\nimport { Form, Input, Button, Typography, message, Checkbox } from 'antd';\nimport { useLoginMutation, useLazyGetCurrentUserQuery } from '@store/services/accountApi';\nimport { useAppDispatch } from '@store/hooks';\nimport { loginSuccess } from '@store/slices/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport type { LoginRequest } from '@/types/loginRequest';\n\nconst Login: React.FC = () => {\n  const [form] = Form.useForm();\n  const [login, { isLoading }] = useLoginMutation();\n  // Use lazy query to fetch current user after login.\n  const [triggerGetCurrentUser] = useLazyGetCurrentUserQuery();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const onFinish = async (values: LoginRequest) => {\n    try {\n      await login(values).unwrap();\n      const currentUserResult = await triggerGetCurrentUser();\n      dispatch(\n        loginSuccess({\n          account: currentUserResult.data ?? null,\n          accessToken: '',\n        })\n      );\n      message.success('Logged in successfully!');\n      navigate('/');\n    } catch (error) {\n      message.error('Login failed! Please check your credentials.');\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 400, margin: 'auto', padding: '1rem' }}>\n      <Typography.Title level={2}>Login</Typography.Title>\n      <Form form={form} layout=\"vertical\" onFinish={onFinish}>\n        <Form.Item\n          name=\"loginIdentifier\"\n          label=\"Username or Email\"\n          rules={[{ required: true, message: 'Please input your username or email' }]}\n        >\n          <Input placeholder=\"Username or Email\" />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          label=\"Password\"\n          rules={[{ required: true, message: 'Please input your password' }]}\n        >\n          <Input.Password placeholder=\"Password\" />\n        </Form.Item>\n        <Form.Item name=\"rememberMe\" valuePropName=\"checked\" initialValue={false}>\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            Login\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default Login;\n"
    },
    {
      "path": "src\\components\\NotificationBell.tsx",
      "content": "import React, { useEffect, useState, useContext } from 'react';\nimport { Badge, Dropdown, Typography, Pagination, Spin } from 'antd';\nimport { BellOutlined } from '@ant-design/icons';\nimport { HubConnectionBuilder, LogLevel, HubConnection } from '@microsoft/signalr';\nimport { useAppDispatch, useGetNotificationsQuery } from '@store/hooks';\nimport { addNotification, setNotifications, setNotificationCount } from '@store/slices/uiSlice';\nimport type { Notification } from '@/types/notification';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@store/index';\nimport { Link } from 'react-router-dom';\nimport { useLazyGetCurrentUserQuery } from '@store/services/accountApi';\nimport { useMarkNotificationsReadMutation } from '@store/services/userApi';\nimport { MessageContext } from '@contexts/MessageContext';\n\nconst NotificationBell: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const notifications = useSelector((state: RootState) => state.ui.notifications);\n  const notificationCount = useSelector((state: RootState) => state.ui.notificationCount);\n  const authSlice = useSelector((state: RootState) => state.auth);\n  // Use lazy query to fetch current user details when needed\n  const [triggerGetCurrentUser, { data: userProfile }] = useLazyGetCurrentUserQuery();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(5);\n  const { data: notificationsData, refetch } = useGetNotificationsQuery({\n    pageIndex: currentPage - 1,\n    pageSize,\n  });\n  const [connection, setConnection] = useState<HubConnection | null>(null);\n  const isInAppNotificationsEnabled =\n    userProfile?.notificationPreference?.isInAppNotificationEnabled ||\n    authSlice.user?.notificationPreference?.isInAppNotificationEnabled;\n\n  const messageApi = useContext(MessageContext);\n  const [markNotificationsRead] = useMarkNotificationsReadMutation();\n  const [isMarkingRead, setIsMarkingRead] = useState(false);\n\n  useEffect(() => {\n    if (notificationsData && isInAppNotificationsEnabled) {\n      dispatch(setNotifications(notificationsData.paginatedNotifications.items));\n      dispatch(setNotificationCount(notificationsData.unreadCount));\n    }\n  }, [notificationsData, dispatch, isInAppNotificationsEnabled]);\n\n  useEffect(() => {\n    if (authSlice.accessToken) {\n      const newConnection = new HubConnectionBuilder()\n        .withUrl(import.meta.env.VITE_SOCKET_NOTIFICATIONHUB, { withCredentials: true })\n        .configureLogging(LogLevel.Information)\n        .withAutomaticReconnect()\n        .build();\n      setConnection(newConnection);\n    }\n  }, [authSlice.accessToken]);\n\n  useEffect(() => {\n    if (connection && isInAppNotificationsEnabled) {\n      connection\n        .start()\n        .then(() => {\n          console.log('Notification SignalR Connected!');\n          connection.on('ReceiveNotification', (notification: Notification) => {\n            dispatch(addNotification(notification));\n            messageApi?.info(notification.details);\n          });\n        })\n        .catch((err) => {\n          console.error('Notification SignalR Connection Error:', err);\n        });\n\n      return () => {\n        connection.off('ReceiveNotification');\n        connection.stop();\n      };\n    }\n  }, [connection, dispatch, isInAppNotificationsEnabled, messageApi]);\n\n  const handleBellClick = () => {\n    // Optionally, reset the notification count here.\n  };\n\n  const hasUnread = notifications.some((notification) => !notification.isRead);\n\n  const handleMarkAllAsRead = async (e?: React.MouseEvent) => {\n    e?.stopPropagation();\n    if (hasUnread) {\n      setIsMarkingRead(true);\n      try {\n        await markNotificationsRead().unwrap();\n        await refetch();\n        dispatch(setNotifications(notificationsData?.paginatedNotifications.items || []));\n      } finally {\n        setIsMarkingRead(false);\n      }\n    }\n  };\n\n  const handlePageChange = (page: number, newPageSize?: number) => {\n    setCurrentPage(page);\n    if (newPageSize && newPageSize !== pageSize) {\n      setPageSize(newPageSize);\n      setCurrentPage(1);\n    }\n  };\n\n  useEffect(() => {\n    refetch();\n  }, [currentPage, pageSize, refetch]);\n\n  const notificationMenu = {\n    items: isInAppNotificationsEnabled\n      ? notifications.length > 0\n        ? [\n            {\n              key: 'mark-all',\n              label: (\n                <Typography.Link\n                  onClick={handleMarkAllAsRead}\n                  style={{\n                    display: 'block',\n                    textAlign: 'center',\n                    color: hasUnread ? undefined : '#ccc',\n                    cursor: hasUnread ? 'pointer' : 'not-allowed',\n                  }}\n                  disabled={isMarkingRead}\n                >\n                  {isMarkingRead ? (\n                    <span>\n                      Marking as read...\n                      <Spin size=\"small\" style={{ marginLeft: 4 }} />\n                    </span>\n                  ) : (\n                    'Mark all as read'\n                  )}\n                </Typography.Link>\n              ),\n            },\n            ...notifications.map((notification) => ({\n              key: notification.id,\n              label: (\n                <div style={{ width: '300px', padding: '.5rem' }}>\n                  {notification.isRead ? (\n                    <Typography.Text>{notification.details}</Typography.Text>\n                  ) : (\n                    <Typography.Text strong>{notification.details}</Typography.Text>\n                  )}\n                  <Typography.Text type=\"secondary\">\n                    {new Date(notification.timestamp).toLocaleString()}\n                  </Typography.Text>\n                </div>\n              ),\n            })),\n            {\n              key: 'pagination',\n              label: (\n                <div\n                  style={{ textAlign: 'center', padding: '8px 0' }}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <Pagination\n                    current={currentPage}\n                    pageSize={pageSize}\n                    total={notificationsData?.paginatedNotifications.totalCount || 0}\n                    onChange={handlePageChange}\n                    size=\"small\"\n                  />\n                </div>\n              ),\n            },\n          ]\n        : [\n            {\n              key: 'no-notifications',\n              label: (\n                <Typography.Text style={{ padding: '12px', display: 'block', textAlign: 'center' }}>\n                  Nothing to see here!\n                </Typography.Text>\n              ),\n            },\n          ]\n      : [\n          {\n            key: 'no-notifications',\n            label: (\n              <Link to=\"/profile\">\n                <Typography.Link\n                  style={{ padding: '12px', display: 'block', textAlign: 'center' }}\n                >\n                  Open in-app notifications to get notifications\n                </Typography.Link>\n              </Link>\n            ),\n          },\n        ],\n  };\n\n  return (\n    <Badge count={notificationCount} offset={[-1, 1]}>\n      <Dropdown\n        menu={notificationMenu}\n        trigger={['hover']}\n        onVisibleChange={(visible) => visible && handleBellClick()}\n      >\n        <span>\n          <BellOutlined style={{ fontSize: '24px', cursor: 'pointer' }} />\n        </span>\n      </Dropdown>\n    </Badge>\n  );\n};\n\nexport default NotificationBell;"
    },
    {
      "path": "src\\components\\ProtectedRoute.tsx",
      "content": "import { useSelector } from 'react-redux';\nimport type { RootState } from '@store/index';\nimport type { ReactNode } from 'react';\nimport ForbiddenAccess from './ForbiddenAccess';\nimport LoadingScreen from './LoadingScreen';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requiredRoles?: string[];\n}\n\nconst ProtectedRoute = ({ children, requiredRoles = [] }: ProtectedRouteProps) => {\n  const { isAuthenticated, user } = useSelector((state: RootState) => state.auth);\n  const { isUserLoading } = useSelector((state: RootState) => state.ui);\n\n  // Show loading screen while checking authentication\n  if (isUserLoading) {\n    return <LoadingScreen />;\n    // return null;\n  }\n\n  // If not authenticated, redirect to login\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Check for required roles\n  if (requiredRoles.length > 0 && user) {\n    const userRoleNames = user.roles?.map(role => role.name) || [];\n    const hasRequiredRole = requiredRoles.some(role => userRoleNames.includes(role));\n    \n    if (!hasRequiredRole) {\n      return <ForbiddenAccess />;\n    }\n  }\n\n  // All checks passed, render the protected content\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;"
    },
    {
      "path": "src\\components\\Sidebar.tsx",
      "content": "import { useEffect } from 'react';\nimport { Layout, Menu, theme, Grid } from 'antd';\nimport {\n  UserOutlined,\n  TeamOutlined,\n  SettingOutlined,\n  SafetyOutlined,\n  FileSearchOutlined,\n} from '@ant-design/icons';\nimport type { MenuProps } from 'antd';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport loadedModules from '@src/modules/modulesLoader';\n\nconst { Sider } = Layout;\nconst { useBreakpoint } = Grid;\n\ninterface SidebarProps {\n  collapsed: boolean;\n  setCollapsed: (collapsed: boolean) => void;\n}\n\nfunction Sidebar({ collapsed, setCollapsed }: SidebarProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { token } = theme.useToken();\n  const screens = useBreakpoint();\n\n  const coreMenuItems: MenuProps['items'] = [\n    {\n      key: 'user-management',\n      icon: <UserOutlined />,\n      label: 'User Management',\n      children: [\n        {\n          key: '/users',\n          icon: <TeamOutlined />,\n          label: 'Users',\n        },\n        {\n          key: '/roles',\n          icon: <SafetyOutlined />,\n          label: 'Roles',\n        },\n      ],\n    },\n  ];\n\n  const settingsMenuItem = {\n    key: '/settings',\n    icon: <SettingOutlined />,\n    label: 'Settings',\n  };\n\n  const auditLogsMenuItem = {\n    key: '/audit-logs',\n    icon: <FileSearchOutlined />,\n    label: 'Audit Logs',\n  };\n\n  const dynamicMenuItems = loadedModules\n    .flatMap((mod) => mod.sideMenuItems ?? []);\n\n  const items: MenuProps['items'] = [\n    ...coreMenuItems,\n    ...dynamicMenuItems,\n    auditLogsMenuItem,\n    settingsMenuItem,\n  ];\n\n  const onClick: MenuProps['onClick'] = (e) => {\n    navigate(e.key);\n  };\n\n  useEffect(() => {\n    const handleTouchOutside = (event: TouchEvent | MouseEvent) => {\n      if ((!screens.xxl && !screens.xl) && !collapsed) {\n        const sidebarElement = document.querySelector('.ant-layout-sider');\n        if (sidebarElement && !sidebarElement.contains(event.target as Node)) {\n          setCollapsed(true);\n        }\n      }\n    };\n\n    document.addEventListener('touchstart', handleTouchOutside);\n    document.addEventListener('mousedown', handleTouchOutside);\n    return () => {\n      document.removeEventListener('touchstart', handleTouchOutside);\n      document.removeEventListener('mousedown', handleTouchOutside);\n    };\n  }, [collapsed, screens.lg, screens.xxl, setCollapsed]);\n\n  return (\n    <Sider\n      trigger={null}\n      collapsible\n      collapsed={collapsed}\n      width={266}\n      collapsedWidth={screens.xl ? 80 : 0}\n      breakpoint=\"xl\"\n      onBreakpoint={(broken) => {\n        if (broken) {\n          setCollapsed(true);\n        }\n      }}\n      style={{\n        position: screens.xl ? 'static' : 'fixed',\n        top: 0,\n        left: 0,\n        minHeight: '100vh',\n        background: token.colorBgContainer,\n        borderRight: `1px solid ${token.colorBorderSecondary}`,\n        zIndex: 10\n      }}\n    >\n      <div style={{\n        height: 32,\n        margin: 16,\n        background: token.colorPrimary,\n        opacity: 0.2\n      }} />\n      <Menu\n        mode=\"inline\"\n        defaultOpenKeys={['user-management']}\n        selectedKeys={[location.pathname]}\n        onClick={onClick}\n        items={items}\n        style={{\n          background: token.colorBgContainer,\n          color: token.colorText,\n          borderRight: 'none'\n        }}\n      />\n    </Sider>\n  );\n}\n\nexport default Sidebar;"
    },
    {
      "path": "src\\constants\\role.ts",
      "content": "export const ROLES = {\n    ADMIN: 'Admin',\n    EDITOR: 'Editor',\n    REGISTERED: 'Registered',\n  } as const;\n  \n  export type Role = typeof ROLES[keyof typeof ROLES];"
    },
    {
      "path": "src\\contexts\\MessageContext.ts",
      "content": "import { createContext } from 'react';\nimport type { MessageInstance } from 'antd/es/message/interface';\n\nexport const MessageContext = createContext<MessageInstance | null>(null);\n"
    },
    {
      "path": "src\\features\\auditLogs\\components\\AuditLogSearchFilters.tsx",
      "content": "import { Input, Select, Space, Grid, Button } from 'antd';\nimport { SearchOutlined, ReloadOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\nconst { useBreakpoint } = Grid;\n\ninterface AuditLogSearchFiltersProps {\n    onSearchFieldChange: (value: string) => void;\n    onSearchTextChange: (value: string) => void;\n    onRefresh: () => void;\n    isLoading: boolean;\n}\n\nexport const AuditLogSearchFilters = ({\n    onSearchFieldChange,\n    onSearchTextChange,\n    onRefresh,\n    isLoading\n}: AuditLogSearchFiltersProps) => {\n    const screens = useBreakpoint();\n\n    return (\n        <Space\n            size=\"large\"\n            direction={screens.xs ? 'vertical' : 'horizontal'}\n            style={{ display: 'flex', justifyContent: 'center', width: '100%', marginBottom: 16 }}\n        >\n            <Input.Group compact style={{ display: 'flex', flexDirection: screens.xs ? 'column' : 'row', gap: '8px' }}>\n                <Select\n                    defaultValue=\"action\"\n                    style={{ width: screens.xs ? '100%' : 120, margin: screens.xs ? '12px 0' : 0 }}\n                    onChange={onSearchFieldChange}\n                >\n                    <Option value=\"user\">User</Option>\n                    <Option value=\"action\">Action</Option>\n                    <Option value=\"entity\">Entity</Option>\n                </Select>\n                <Input\n                    placeholder=\"Search logs...\"\n                    prefix={<SearchOutlined />}\n                    onChange={e => onSearchTextChange(e.target.value)}\n                    style={{ width: screens.xs ? '100%' : 200 }}\n                    allowClear\n                />\n                <Button\n                    icon={<ReloadOutlined />}\n                    onClick={onRefresh}\n                    loading={isLoading}\n                    disabled={isLoading}\n                    style={{ width: screens.xs ? '100%' : 'auto' }}\n                >\n                    Refresh\n                </Button>\n            </Input.Group>\n        </Space>\n    );\n};\n"
    },
    {
      "path": "src\\features\\auditLogs\\components\\AuditLogsList.tsx",
      "content": "import React, { useState, useMemo, useEffect } from 'react';\nimport { Table, Card, Pagination, Grid, Layout } from 'antd';\nimport { useGetAuditLogsQuery, useGetAuditLogsDynamicQuery } from '@store/services/auditLogApi';\nimport debounce from 'lodash/debounce';\nimport type { ColumnsType, TableProps } from 'antd/es/table';\nimport type { AuditLog } from '@/types/auditLog';\nimport FormattedDate from '@components/FormattedDate';\nimport { AuditLogSearchFilters } from './AuditLogSearchFilters';\nimport { useDispatch } from 'react-redux';\nimport { setLoading } from '@store/slices/uiSlice';\n\nconst { useBreakpoint } = Grid;\nconst { Content } = Layout;\n\nconst AuditLogsList: React.FC = () => {\n    const [pageIndex, setPageIndex] = useState(0);\n    const [pageSize, setPageSize] = useState(10);\n    const [searchText, setSearchText] = useState('');\n    const [searchField, setSearchField] = useState('action');\n    const [sortField, setSortField] = useState<string | null>(null);\n    const [sortDirection, setSortDirection] = useState<string | null>(null);\n    const [hasUserSorted, setHasUserSorted] = useState(false);\n\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        dispatch(setLoading(isLoading));\n    }, [dispatch]);\n\n    const buildFilterDescriptor = (text: string, field: string) => {\n        if (!text) return undefined;\n        return {\n            field,\n            operator: 'contains',\n            value: text,\n            isCaseSensitive: false\n        };\n    };\n\n    const shouldUseDynamicQuery = Boolean(searchText || (hasUserSorted && sortField));\n\n    const {\n        data: auditLogs, \n        isFetching: isLogListLoading,\n        refetch: refetchNormalQuery\n    } = useGetAuditLogsQuery(\n        { pageIndex, pageSize },\n        { skip: shouldUseDynamicQuery }\n    );\n\n    const { \n        data: auditLogsDynamic, \n        isFetching: isDynamicLogListLoading,\n        refetch: refetchDynamicQuery \n    } = useGetAuditLogsDynamicQuery(\n        {\n            pageIndex,\n            pageSize,\n            sort: sortField && sortDirection ? [{ field: sortField, dir: sortDirection }] : undefined,\n            filter: buildFilterDescriptor(searchText, searchField)\n        },\n        { skip: !shouldUseDynamicQuery }\n    );\n\n    const currentData = shouldUseDynamicQuery ? auditLogsDynamic : auditLogs;\n    const isLoading = shouldUseDynamicQuery ? isDynamicLogListLoading : isLogListLoading;\n\n    const debouncedSearch = useMemo(\n        () => debounce((value: string) => {\n            setSearchText(value);\n            if (!value) {\n                setPageIndex(0);\n                setHasUserSorted(false);\n                setSortField(null);\n                setSortDirection(null);\n            }\n        }, 500),\n        []\n    );\n\n    const handleTableChange: TableProps<AuditLog>['onChange'] = (_pagination, _filters, sorter) => {\n        setHasUserSorted(true);\n        if ('field' in sorter && 'order' in sorter) {\n            setSortField(sorter.field as string);\n            setSortDirection(sorter.order === 'ascend' ? 'asc' : 'desc');\n        } else {\n            setSortField(null);\n            setSortDirection(null);\n        }\n    };\n\n    const handleRefresh = () => {\n        if (searchText) {\n            // If there's search text, just refresh the dynamic query\n            refetchDynamicQuery();\n        } else {\n            // If no search text, reset states and refresh normal query\n            setPageIndex(0);\n            setHasUserSorted(false);\n            setSortField(null);\n            setSortDirection(null);\n            setTimeout(() => refetchNormalQuery(), 0);\n        }\n    };\n\n    const columns: ColumnsType<AuditLog> = [\n        { title: 'User', dataIndex: 'user', key: 'user', sorter: true },\n        { title: 'Action', dataIndex: 'action', key: 'action', sorter: true },\n        { title: 'Entity', dataIndex: 'entity', key: 'entity' },\n        { title: 'Entity Id', dataIndex: 'entityId', key: 'entityId' },\n        {\n            title: 'Timestamp',\n            dataIndex: 'timestamp',\n            key: 'timestamp',\n            sorter: true,\n            render: (text: string) => <FormattedDate date={text} />\n        },\n        { title: 'Details', dataIndex: 'details', key: 'details' },\n    ];\n\n    const screens = useBreakpoint();\n\n    return (\n        <Layout style={{ background: 'transparent', padding: 0 }}>\n            <Content style={{ padding: 0, width: '100%' }}>\n                <Card\n                    title=\"Audit Logs\"\n                    style={{\n                        margin: screens.xs ? '2px 0px' : '2px 16px',\n                        padding: screens.xs ? '4px 0px' : '4px',\n                    }}\n                    bodyStyle={{\n                        padding: screens.xs ? '4px' : '16px',\n                    }}\n                    headStyle={{\n                        padding: screens.xs ? '4px 6px' : '4px',\n                    }}\n                >\n                    <AuditLogSearchFilters\n                        onSearchFieldChange={setSearchField}\n                        onSearchTextChange={debouncedSearch}\n                        onRefresh={handleRefresh}\n                        isLoading={isLoading}\n                    />\n                    <Table<AuditLog>\n                        columns={columns}\n                        dataSource={currentData?.items}\n                        loading={isLoading}\n                        rowKey=\"id\"\n                        pagination={false}\n                        onChange={handleTableChange}\n                        style={{ width: '100%', overflowX: 'auto' }}\n                    />\n                    <Pagination\n                        current={pageIndex + 1}\n                        pageSize={pageSize}\n                        total={currentData?.totalCount}\n                        onChange={(page, newPageSize) => {\n                            setPageIndex(page - 1);\n                            setPageSize(newPageSize);\n                        }}\n                        showSizeChanger\n                        showTotal={total => `${total} Logs in total`}\n                        responsive\n                        style={{ \n                            marginTop: 16,\n                            textAlign: 'right',\n                            display: 'flex',\n                            justifyContent: 'flex-end',\n                        }}\n                    />\n                </Card>\n            </Content>\n        </Layout>\n    );\n};\n\nexport default AuditLogsList;"
    },
    {
      "path": "src\\features\\roles\\components\\RolesManagement.tsx",
      "content": "import { useState, useMemo, useEffect, useContext } from 'react';\nimport { Layout, Card, List, Checkbox, Typography, Space, theme, Button, Modal, Input, Popconfirm, Grid, Collapse, Tag, Spin } from 'antd';\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport { PlusOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport {  setLoading } from '@store/slices/uiSlice';\nimport {\n  useGetRolesQuery,\n  useGetPermissionsQuery,\n  useGetRoleDetailsQuery,\n  useUpdateRolePermissionMutation,\n  useCreateRoleMutation,\n  useDeleteRoleMutation,\n  useUpdateRoleNameMutation\n} from '@store/services/roleApi';\nimport { Role } from '@/types/role';\nimport { Permission } from '@/types/permission';\nimport { MessageContext } from '@contexts/MessageContext';\n\nconst { Sider, Content } = Layout;\nconst { Text } = Typography;\nconst { Panel } = Collapse;\n\nconst formatPermissionName = (permissionName: string): string => {\n  const [feature, action] = permissionName.split(':');\n  return `${action.charAt(0).toUpperCase() + action.slice(1)} ${feature}`;\n};\n\nconst RolesManagement = () => {\n  const dispatch = useDispatch();\n  const [selectedRoleId, setSelectedRoleId] = useState<string | null>(null);\n  const { token } = theme.useToken();\n  const { useBreakpoint } = Grid;\n  const screens = useBreakpoint();\n\n  const messageApi = useContext(MessageContext);\n\n  const { data: rolesData, isLoading: isLoadingRoles } = useGetRolesQuery({\n    pageIndex: 0,\n    pageSize: 10\n  });\n\n  const { data: permissionsData, isLoading: isLoadingPermissions } = useGetPermissionsQuery({\n    pageIndex: 0,\n    pageSize: 100\n  });\n\n  const { data: roleDetails, isLoading: isLoadingRoleDetails } = useGetRoleDetailsQuery(selectedRoleId!, {\n    skip: !selectedRoleId\n  });\n\n  useEffect(() => {\n    dispatch(setLoading(isLoadingRoles || isLoadingPermissions || isLoadingRoleDetails));\n  }, [isLoadingRoles, isLoadingPermissions, isLoadingRoleDetails, dispatch]);\n\n  const [updatePermission] = useUpdateRolePermissionMutation();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [newRoleName, setNewRoleName] = useState('');\n\n  const [createRole] = useCreateRoleMutation();\n  const [deleteRole] = useDeleteRoleMutation();\n\n  const [isEditNameModalOpen, setIsEditNameModalOpen] = useState(false);\n  const [editingRole, setEditingRole] = useState<{ id: string; name: string } | null>(null);\n\n  const [updateRoleName] = useUpdateRoleNameMutation();\n\n  const groupedPermissions = useMemo(() => {\n    if (!permissionsData?.items) return {};\n  \n    const items = permissionsData.items as unknown as Permission[];\n  \n    return items.reduce((acc: Record<string, Permission[]>, permission: Permission) => {\n      if (!acc[permission.feature]) {\n        acc[permission.feature] = [];\n      }\n      acc[permission.feature].push(permission);\n      return acc;\n    }, {});\n  }, [permissionsData]);\n  \n\n  const handlePermissionChange = async (permissionId: string, checked: boolean) => {\n    if (!selectedRoleId) return;\n\n    try {\n      await updatePermission({\n        roleId: selectedRoleId,\n        permissionId,\n        operation: checked ? 'Add' : 'Remove'\n      }).unwrap();\n\n      messageApi?.success(`Permission ${checked ? 'added to' : 'removed from'} role`);\n    } catch (error: any) {\n      console.log({error});\n      messageApi?.error(error.data?.errors || error.data?.detail || 'Failed to update permission');\n    }\n  };\n\n  const handleCreateRole = async () => {\n    try {\n      await createRole({ name: newRoleName }).unwrap();\n      messageApi?.success('Role created successfully');\n      setIsCreateModalOpen(false);\n      setNewRoleName('');\n    } catch (error: any) {\n      if (error.data?.errors) {\n        error.data.errors.forEach((errorMessage: string) => {\n          messageApi?.error(errorMessage || 'Failed to create role');\n        });\n      } else {\n        messageApi?.error('Failed to create role');\n      }\n    }\n  };\n\n  const handleDeleteRole = async (roleId: string) => {\n    try {\n      await deleteRole(roleId).unwrap();\n      messageApi?.success('Role deleted successfully');\n      if (selectedRoleId === roleId) {\n        setSelectedRoleId(null);\n      }\n    } catch (error: any) {\n      if (error.status === 403 && error.data?.errors) {\n        error.data.errors.forEach((errorMessage: string) => {\n          messageApi?.error(errorMessage || 'Failed to delete role');\n        });\n      } else {\n        messageApi?.error('Failed to delete role');\n      }\n    }\n  };\n\n  const handleEditRole = (role: { id: string; name: string }) => {\n    setEditingRole(role);\n    setIsEditNameModalOpen(true);\n  };\n\n  const handleUpdateRoleName = async () => {\n    if (!editingRole) return;\n\n    try {\n      await updateRoleName({\n        roleId: editingRole.id,\n        name: editingRole.name,\n      }).unwrap();\n\n      messageApi?.success('Role name updated successfully');\n      setIsEditNameModalOpen(false);\n      setEditingRole(null);\n    } catch (error: any) {\n      messageApi?.error(error.data?.errors || 'Failed to update role name');\n    }\n  };\n\n  return (\n    <>\n      <Typography.Title level={2}>Roles Management</Typography.Title>\n      <Layout style={{ background: 'inherit', flexDirection: screens.md ? 'row' : 'column' }}>\n        <Sider width={screens.md ? 300 : '100%'} style={{ background: 'inherit', marginBottom: screens.md ? 0 : 16 }}>\n          <Collapse defaultActiveKey={['1']} style={{ background: 'inherit' }}>\n            <Panel\n              header={selectedRoleId ? `Selected Role: ${rolesData?.items.find(role => role.id === selectedRoleId)?.name}` : \"Roles\"}\n              key=\"1\"\n              extra={\n                <Button\n                  type=\"primary\"\n                  icon={<PlusOutlined />}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setIsCreateModalOpen(true);\n                  }}\n                />\n              }\n            >\n              <Spin spinning={isLoadingRoles}>\n                <List\n                  dataSource={rolesData?.items}\n                  style={{ maxHeight: '500px', overflow: 'auto' }}\n                  renderItem={(role: Role) => (\n                    <List.Item\n                      onClick={() => setSelectedRoleId(role.id)}\n                      style={{\n                        cursor: 'pointer',\n                        padding: '10px 0px 10px 12px',\n                        margin: '4px 0',\n                        borderRadius: token.borderRadius,\n                        background: selectedRoleId === role.id ? token.colorBgTextHover : 'transparent',\n                        transition: 'all 0.3s'\n                      }}\n                      actions={[\n                        <Space align=\"center\" size={1}>\n                          <Button\n                            type=\"text\"\n                            icon={<EditOutlined />}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditRole(role);\n                            }}\n                          />\n                          {!role.isDefault && (\n                            <Popconfirm\n                              title=\"Delete Role\"\n                              description=\"Are you sure you want to delete this role?\"\n                              onConfirm={(e) => {\n                                e?.stopPropagation();\n                                handleDeleteRole(role.id);\n                              }}\n                              onCancel={(e) => e?.stopPropagation()}\n                            >\n                              <Button\n                                type=\"text\"\n                                danger\n                                icon={<DeleteOutlined />}\n                                onClick={(e) => e.stopPropagation()}\n                                style={{ marginRight: '0px', paddingRight: '0px' }}\n                              />\n                            </Popconfirm>\n                          )}\n                        </Space>\n                      ]}\n                    >\n                      <Space align=\"center\" size={1}>\n                        <Text strong>{role.name}</Text>\n                        {role.isDefault && <Tag color=\"blue\" style={{ marginLeft: 4, fontSize: '75%' }}>Default</Tag>}\n                      </Space>\n                    </List.Item>\n                  )}\n                />\n              </Spin>\n            </Panel>\n          </Collapse>\n        </Sider>\n        <Content style={{ padding: screens.md ? '0 24px' : '0', width: '100%' }}>\n          {selectedRoleId ? (\n            <Card title={`Permissions for ${roleDetails?.name}`}>\n              <Space direction=\"vertical\" style={{ maxHeight: '500px', overflow: 'auto', width: '100%' }}>\n                {Object.entries(groupedPermissions).map(([feature, permissions]) => (\n                  <Card\n                    key={feature}\n                    size=\"small\"\n                    title={<Text strong style={{ textTransform: 'capitalize' }}>{feature}</Text>}\n                  >\n                    <Space direction=\"vertical\">\n                      {(permissions as Permission[]).map((permission: Permission) => (\n                        <Checkbox\n                          key={permission.id}\n                          checked={roleDetails?.permissions?.some((p) => p.id === permission.id)}\n                          onChange={(e: CheckboxChangeEvent) =>\n                            handlePermissionChange(permission.id, e.target.checked)\n                          }\n                        >\n                          {formatPermissionName(permission.name)}\n                        </Checkbox>\n                      ))}\n                    </Space>\n                  </Card>\n                ))}\n              </Space>\n            </Card>\n          ) : (\n            <Card>\n              <Text>Select a role to manage permissions</Text>\n            </Card>\n          )}\n        </Content>\n\n        <Modal\n          title=\"Create New Role\"\n          open={isCreateModalOpen}\n          onOk={handleCreateRole}\n          onCancel={() => {\n            setIsCreateModalOpen(false);\n            setNewRoleName('');\n          }}\n          okButtonProps={{ disabled: !newRoleName.trim() }}\n        >\n          <Input\n            placeholder=\"Enter role name\"\n            value={newRoleName}\n            onChange={(e) => setNewRoleName(e.target.value)}\n          />\n        </Modal>\n\n        <Modal\n          title=\"Edit Role Name\"\n          open={isEditNameModalOpen}\n          onOk={handleUpdateRoleName}\n          onCancel={() => {\n            setIsEditNameModalOpen(false);\n            setEditingRole(null);\n          }}\n          okButtonProps={{ disabled: !editingRole?.name.trim() }}\n        >\n          <Input\n            placeholder=\"Enter new role name\"\n            value={editingRole?.name || ''}\n            onChange={(e) => setEditingRole(prev => prev ? { ...prev, name: e.target.value } : null)}\n          />\n        </Modal>\n      </Layout>\n    </>\n  );\n};\n\nexport default RolesManagement;"
    },
    {
      "path": "src\\features\\users\\components\\EditUserModal.tsx",
      "content": "import { Modal, Button, Checkbox } from 'antd';\nimport type { UserInfo } from '@/types/user';\nimport type { Role } from '@/types/role';\n\ninterface EditUserModalProps {\n    visible: boolean;\n    onClose: () => void;\n    selectedUser: UserInfo | null;\n    roles: Role[];\n    selectedRoles: Set<string>;\n    onRoleChange: (roleId: string, checked: boolean) => Promise<void>;\n}\n\nexport const EditUserModal = ({\n    visible,\n    onClose,\n    selectedUser,\n    roles,\n    selectedRoles,\n    onRoleChange\n}: EditUserModalProps) => (\n    <Modal\n        title=\"Edit User Roles\"\n        open={visible}\n        onCancel={onClose}\n        footer={[\n            <Button key=\"close\" onClick={onClose}>\n                Close\n            </Button>,\n        ]}\n    >\n        {selectedUser && (\n            <>\n                <div style={{ marginBottom: 16 }}>\n                    <div>\n                        <strong>Name: </strong>\n                        &nbsp;{selectedUser.firstName.value} {selectedUser.lastName.value}\n                    </div>\n                    <div>\n                        <strong>Email: </strong>\n                        &nbsp;{selectedUser.email.value}\n                    </div>\n                </div>\n                <div>\n                    <strong>Roles:</strong>\n                    {roles.map((role) => (\n                        <div key={role.id} style={{ marginTop: 8 }}>\n                            <Checkbox\n                                checked={selectedRoles.has(role.id)}\n                                onChange={(e) => onRoleChange(role.id, e.target.checked)}\n                            >\n                                {role.name}\n                            </Checkbox>\n                        </div>\n                    ))}\n                </div>\n            </>\n        )}\n    </Modal>\n); "
    },
    {
      "path": "src\\features\\users\\components\\RegisterUserModal.tsx",
      "content": "import { Modal, Form, Input, Button } from 'antd';\nimport type { RegisterUser } from '@/types/registerUser';\n\ninterface RegisterUserModalProps {\n    visible: boolean;\n    onClose: () => void;\n    onRegister: (values: RegisterUser) => Promise<void>;\n}\n\nexport const RegisterUserModal = ({\n    visible,\n    onClose,\n    onRegister\n}: RegisterUserModalProps) => {\n    const [form] = Form.useForm();\n\n    const handleClose = () => {\n        form.resetFields();\n        onClose();\n    };\n\n    return (\n        <Modal\n            title=\"Register User\"\n            open={visible}\n            onCancel={handleClose}\n            footer={null}\n        >\n            <Form\n                form={form}\n                onFinish={onRegister}\n                layout=\"vertical\"\n            >\n                <Form.Item label=\"Email\" name=\"email\" rules={[{ required: true, message: 'Email is required', type: 'email' }]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item label=\"First Name\" name=\"firstName\" rules={[{ required: true, message: 'First name is required' }]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item label=\"Last Name\" name=\"lastName\" rules={[{ required: true, message: 'Last name is required' }]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item label=\"Password\" name=\"password\" rules={[{ required: true, message: 'Password is required' }]}>\n                    <Input.Password />\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" name=\"confirmPassword\" rules={[{ required: true, message: 'Please confirm your password' }]}>\n                    <Input.Password />\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" block>\n                        Register\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n};"
    },
    {
      "path": "src\\features\\users\\components\\UserSearchFilters.tsx",
      "content": "import { Input, Select, Space, Grid, Button } from 'antd';\nimport { SearchOutlined, ReloadOutlined } from '@ant-design/icons';\nimport type { Role } from '@/types/role';\n\nconst { Option } = Select;\nconst { useBreakpoint } = Grid;\n\ninterface UserSearchFiltersProps {\n    onSearchFieldChange: (value: string) => void;\n    onSearchTextChange: (value: string) => void;\n    onRoleFilterChange: (roleId: string | undefined) => void;\n    selectedRoleId?: string;\n    roles?: Role[];\n    onRefresh: () => void;\n    isLoading: boolean;\n}\n\nexport const UserSearchFilters = ({\n    onSearchFieldChange,\n    onSearchTextChange,\n    onRoleFilterChange,\n    selectedRoleId,\n    roles,\n    onRefresh,\n    isLoading\n}: UserSearchFiltersProps) => {\n    const screens = useBreakpoint();\n\n    return (\n        <Space\n            size=\"large\"\n            direction={screens.xs ? 'vertical' : 'horizontal'}\n            style={{ display: 'flex', justifyContent: 'center', width: '100%', marginBottom: 16 }}\n        >\n            <Input.Group compact style={{ display: 'flex', flexDirection: screens.xs ? 'column' : 'row', gap: '8px' }}>\n                <Select\n                    defaultValue=\"firstName\"\n                    style={{ width: screens.xs ? '100%' : 120, margin: screens.xs ? '12px 0' : 0 }}\n                    onChange={onSearchFieldChange}\n                >\n                    <Option value=\"firstName\">First Name</Option>\n                    <Option value=\"lastName\">Last Name</Option>\n                    <Option value=\"email\">Email</Option>\n                </Select>\n                <Input\n                    placeholder=\"Search users...\"\n                    prefix={<SearchOutlined />}\n                    onChange={e => onSearchTextChange(e.target.value)}\n                    style={{ width: screens.xs ? '100%' : 200 }}\n                    allowClear\n                />\n                <Button\n                    icon={<ReloadOutlined />}\n                    onClick={onRefresh}\n                    loading={isLoading}\n                    disabled={isLoading}\n                    style={{ width: screens.xs ? '100%' : 'auto' }}\n                >\n                    Refresh\n                </Button>\n            </Input.Group>\n            <Select\n                allowClear\n                style={{ width: screens.xs ? '100%' : 200 }}\n                placeholder=\"Filter by role\"\n                onChange={onRoleFilterChange}\n                value={selectedRoleId}\n            >\n                {roles?.map(role => (\n                    <Select.Option key={role.id} value={role.id}>\n                        {role.name}\n                    </Select.Option>\n                ))}\n            </Select>\n        </Space>\n    );\n};"
    },
    {
      "path": "src\\features\\users\\components\\UsersTable.tsx",
      "content": "import { useState, useMemo, useEffect, useContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setLoading } from '@store/slices/uiSlice';\nimport {\n    Table,\n    Card,\n    Button,\n    Tag,\n    Space,\n    Form,\n    Pagination,\n    Grid,\n    Layout,\n    Typography\n} from 'antd';\nimport type { ColumnsType, TableProps } from 'antd/es/table';\nimport debounce from 'lodash/debounce';\nimport {\n    useGetUsersQuery,\n    useGetUserDetailsQuery,\n    useUpdateUserRoleMutation,\n    useGetUsersDynamicQuery,\n    useGetUsersByRoleQuery\n} from '@store/services/userApi';\nimport { useGetRolesQuery } from '@store/services/roleApi';\nimport { useRegisterMutation } from '@store/services/accountApi';\nimport { UserSearchFilters } from './UserSearchFilters';\nimport { EditUserModal } from './EditUserModal';\nimport { RegisterUser } from '@/types/registerUser';\nimport { RegisterUserModal } from './RegisterUserModal';\nimport type { ErrorResponse } from '@/types/errorResponse';\nimport type { UserInfo } from '@/types/user';\nimport type { Role } from '@/types/role';\nimport { MessageContext } from '@contexts/MessageContext';\n\nconst { Content } = Layout;\n\nconst UsersTable = () => {\n    const dispatch = useDispatch();\n    const [pageIndex, setPageIndex] = useState(0);\n    const [pageSize, setPageSize] = useState(10);\n    const [registerUserModalVisible, setRegisterUserModalVisible] = useState(false);\n    const [editModalVisible, setEditModalVisible] = useState(false);\n    const [selectedUser, setSelectedUser] = useState<UserInfo | null>(null);\n    const [selectedRoles, setSelectedRoles] = useState<Set<string>>(new Set());\n    const [, setHasChanges] = useState(false);\n    const [registerUser] = useRegisterMutation();\n    const { data: rolesData } = useGetRolesQuery({ pageIndex: 0, pageSize: 100 });\n    const roles = rolesData?.items ?? [];\n\n    useGetUserDetailsQuery(selectedUser?.id ?? '', {\n        skip: !selectedUser,\n    });\n\n    const [updateUserRole] = useUpdateUserRoleMutation();\n    const { refetch } = useGetUsersQuery({ pageIndex, pageSize });\n\n    const [form] = Form.useForm();\n\n    const [searchText, setSearchText] = useState('');\n    const [searchField, setSearchField] = useState('firstName');\n    const [sortField, setSortField] = useState<string | null>(null);\n    const [sortDirection, setSortDirection] = useState<string | null>(null);\n    const [selectedRoleId, setSelectedRoleId] = useState<string | undefined>();\n\n    const messageApi = useContext(MessageContext);\n\n    interface FilterDescriptor {\n        field: string;\n        operator: string;\n        value: string;\n        isCaseSensitive: boolean;\n    }\n\n    const buildFilterDescriptor = (text: string, field: string): FilterDescriptor | undefined => {\n        if (!text) return undefined;\n        return {\n            field,\n            operator: 'contains',\n            value: text,\n            isCaseSensitive: false\n        };\n    };\n\n    const {\n        data: usersByRole,\n        isFetching: isLoadingUsersByRole,\n        refetch: refetchUsersByRole\n    } = useGetUsersByRoleQuery({\n        roleId: selectedRoleId!,\n        pageIndex,\n        pageSize,\n    }, { skip: !selectedRoleId });\n\n    const {\n        data: userDetailsDynamic,\n        isFetching: isLoadingDynamic,\n        refetch: refetchDynamicUsers\n    } = useGetUsersDynamicQuery({\n        pageIndex,\n        pageSize,\n        sort: sortField && sortDirection ? [{ field: sortField, dir: sortDirection }] : undefined,\n        filter: buildFilterDescriptor(searchText, searchField)\n    }, { skip: !!selectedRoleId });\n\n    const userData = selectedRoleId ? usersByRole : userDetailsDynamic;\n    const isLoading = selectedRoleId ? isLoadingUsersByRole : isLoadingDynamic;\n\n    useEffect(() => {\n        dispatch(setLoading(isLoading));\n    }, [isLoading, dispatch]);\n\n    const debouncedSearch = useMemo(\n        () => debounce((value: string) => {\n            setSearchText(value);\n        }, 500),\n        []\n    );\n\n    const handleTableChange: TableProps<UserInfo>['onChange'] = (_pagination, _filters, sorter) => {\n        if ('field' in sorter && 'order' in sorter) {\n            setSortField(sorter.field as string);\n            setSortDirection(sorter.order === 'ascend' ? 'asc' : 'desc');\n        } else {\n            setSortField(null);\n            setSortDirection(null);\n        }\n    };\n\n    const handleEditClick = (user: UserInfo) => {\n        setSelectedUser(user);\n        setSelectedRoles(new Set(user.roles.map(role => role.id)));\n        setHasChanges(false);\n        setEditModalVisible(true);\n    };\n\n    const handleRoleChange = async (roleId: string, checked: boolean) => {\n        if (!selectedUser) return;\n        try {\n            await updateUserRole({\n                userId: selectedUser.id,\n                roleId,\n                operation: checked ? 'Add' : 'Remove',\n            }).unwrap();\n\n            const newSelectedRoles = new Set(selectedRoles);\n            if (checked) {\n                newSelectedRoles.add(roleId);\n            } else {\n                newSelectedRoles.delete(roleId);\n            }\n            setSelectedRoles(newSelectedRoles);\n\n            const updatedRoles = checked\n                ? [...selectedUser.roles, roles.find(r => r.id === roleId)]\n                : selectedUser.roles.filter(r => r.id !== roleId);\n\n            setSelectedUser({\n                ...selectedUser,\n                roles: updatedRoles.filter((role): role is Role => role !== undefined)\n            });\n\n            messageApi?.success(`Role ${checked ? 'added' : 'removed'} successfully`);\n        } catch {\n            messageApi?.error(`Failed to ${checked ? 'add' : 'remove'} role`);\n        }\n    };\n\n    const columns: ColumnsType<UserInfo> = [\n        {\n            title: 'First Name',\n            dataIndex: 'firstName',\n            key: 'firstName',\n            sorter: true,\n            sortOrder: sortField === 'firstName' ? (sortDirection === 'asc' ? 'ascend' : 'descend') : undefined,\n            render: (text: string) => text,\n        },\n        {\n            title: 'Last Name',\n            dataIndex: 'lastName',\n            key: 'lastName',\n            sorter: true,\n            sortOrder: sortField === 'lastName' ? (sortDirection === 'asc' ? 'ascend' : 'descend') : undefined,\n            render: (text: string) => text,\n        },\n        {\n            title: 'Email',\n            dataIndex: 'email',\n            key: 'email',\n            sorter: true,\n            sortOrder: sortField === 'email' ? (sortDirection === 'asc' ? 'ascend' : 'descend') : undefined,\n        },\n        {\n            title: 'Roles',\n            key: 'roles',\n            render: (_, record) => (\n                <Space direction=\"vertical\">\n                    {record.roles.map((role) => (\n                        <Tag key={role.id} color=\"blue\">\n                            {role.name}\n                        </Tag>\n                    ))}\n                </Space>\n            ),\n        },\n        {\n            title: 'Actions',\n            key: 'actions',\n            render: (_, record) => (\n                <Button type=\"link\" onClick={() => handleEditClick(record)}>\n                    Edit\n                </Button>\n            ),\n        },\n    ];\n\n    const handleRegisterUser = async (values: RegisterUser) => {\n        try {\n            await registerUser(values).unwrap();\n            messageApi?.success('User registered successfully');\n            setRegisterUserModalVisible(false);\n            form.resetFields();\n            refetch();\n        } catch (error: unknown) {\n            const errorMessage = (error as ErrorResponse).data?.message\n                || (error as ErrorResponse).data?.title\n                || (error as ErrorResponse).data?.errors?.join(', ')\n                || 'Failed to register user';\n\n            messageApi?.error(errorMessage);\n        }\n    };\n\n    const handleRefresh = () => {\n        setPageIndex(0);\n        if (selectedRoleId) {\n            refetchUsersByRole();\n        } else if (searchText) {\n            refetchDynamicUsers();\n        } else {\n            refetch();\n        }\n    };\n\n    const { useBreakpoint } = Grid;\n    const screens = useBreakpoint();\n\n    return (\n        <>\n            <Layout style={{ background: 'inherit', padding: 0 }}>\n                <Content style={{ padding: 0, width: '100%' }}>\n                    <Typography.Title level={2}>Users Management</Typography.Title>\n                    <Card\n                        title=\"Users\"\n                        extra={\n                            <Button\n                                type=\"primary\"\n                                onClick={() => setRegisterUserModalVisible(true)}\n                            >\n                                New User\n                            </Button>\n                        }\n                        style={{\n                            margin: screens.xs ? '2px 0px' : '2px 16px',\n                            padding: screens.xs ? '4px 0px' : '4px',\n                        }}\n                        bodyStyle={{\n                            padding: screens.xs ? '4px' : '16px',\n                        }}\n                        headStyle={{\n                            padding: screens.xs ? '4px 6px' : '4px',\n                        }}\n                    >\n                        <UserSearchFilters\n                            onSearchFieldChange={setSearchField}\n                            onSearchTextChange={debouncedSearch}\n                            onRoleFilterChange={setSelectedRoleId}\n                            selectedRoleId={selectedRoleId}\n                            roles={rolesData?.items}\n                            onRefresh={handleRefresh}\n                            isLoading={isLoading}\n                        />\n                        <Table<UserInfo>\n                            columns={columns}\n                            dataSource={userData?.items}\n                            loading={isLoading}\n                            rowKey=\"id\"\n                            pagination={false}\n                            onChange={handleTableChange}\n                            style={{\n                                width: '100%',\n                                overflowX: 'auto',\n                            }}\n                        />\n                        <Pagination\n                            current={pageIndex + 1}\n                            pageSize={pageSize}\n                            total={userData?.totalCount}\n                            onChange={(page, newPageSize) => {\n                                setPageIndex(page - 1);\n                                setPageSize(newPageSize);\n                            }}\n                            responsive\n                            showSizeChanger\n                            showTotal={total => `${total} Users in total`}\n                            style={{\n                                marginTop: 16,\n                                textAlign: 'right',\n                                display: 'flex',\n                                justifyContent: 'flex-end',\n                            }}\n                        />\n                    </Card>\n                    <EditUserModal\n                        visible={editModalVisible}\n                        onClose={() => setEditModalVisible(false)}\n                        selectedUser={selectedUser}\n                        roles={roles}\n                        selectedRoles={selectedRoles}\n                        onRoleChange={handleRoleChange}\n                    />\n                    <RegisterUserModal\n                        visible={registerUserModalVisible}\n                        onClose={() => setRegisterUserModalVisible(false)}\n                        onRegister={handleRegisterUser}\n                    />\n                </Content>\n            </Layout>\n        </>\n    );\n};\n\nexport default UsersTable;"
    },
    {
      "path": "src\\hooks\\useLocalStorage.ts",
      "content": "import { useState, useEffect } from 'react';\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  const readValue = () => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  };\n\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n\n  const setValue = (value: T) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage; "
    },
    {
      "path": "src\\hooks\\useMessage.ts",
      "content": "import { message } from 'antd';\n\nconst useMessage = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n  return { messageApi, contextHolder };\n};\n\nexport default useMessage;\n"
    },
    {
      "path": "src\\pages\\ActivityMonitor.tsx",
      "content": "import React, { useState, useEffect } from 'react';\nimport { Table, Select, message, Grid, Card, Layout } from 'antd';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport type { ColumnsType } from 'antd/es/table';\nimport FormattedDate from '@components/FormattedDate';\n\nconst { Option } = Select;\nconst { useBreakpoint } = Grid;\nconst { Content } = Layout;\n\ninterface Log {\n    Id: string;\n    User: string;\n    Action: string;\n    Timestamp: string;\n    Details: string;\n    IpAddress: string;\n}\n\nconst columns: ColumnsType<Log> = [\n    {\n        title: 'User',\n        dataIndex: 'User',\n        key: 'User',\n    },\n    {\n        title: 'Action',\n        dataIndex: 'Action',\n        key: 'Action',\n    },\n    {\n        title: 'Entity',\n        dataIndex: 'Entity',\n        key: 'Entity',\n    },\n    {\n        title: 'Entity Id',\n        dataIndex: 'EntityId',\n        key: 'EntityId',\n    },\n    {\n        title: 'Timestamp',\n        dataIndex: 'Timestamp',\n        key: 'Timestamp',\n        render: (text: string) => <FormattedDate date={text} />\n    },\n    {\n        title: 'Details',\n        dataIndex: 'Details',\n        key: 'Details',\n    }\n];\n\nconst ActivityMonitor: React.FC = () => {\n    const [logs, setLogs] = useState<Log[]>([]);\n    const [logSize, setLogSize] = useState<number>(10);\n    const screens = useBreakpoint();\n\n    useEffect(() => {\n        const connection = new HubConnectionBuilder()\n            .withUrl(import.meta.env.VITE_SOCKET_AUDITLOGHUB)\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        connection.start()\n            .then(() => {\n                console.log('AuditLog SignalR Connected!');\n            })\n            .catch(err => {\n                console.error('SignalR Connection Error: ', err);\n                message.error('Failed to connect to the log server.');\n            });\n\n        connection.on('ReceiveAuditLog', (message: string) => {\n            const newLog: Log = JSON.parse(message);\n            setLogs((prevLogs) => {\n                const updatedLogs = [newLog, ...prevLogs];\n                return updatedLogs.slice(0, logSize);\n            });\n        });\n\n        return () => {\n            connection.stop();\n        };\n    }, [logSize]);\n\n    return (\n        <Layout style={{ background: 'transparent', padding: 0 }}>\n            <Content style={{ padding: 0, width: '100%' }}>\n                <Card\n                    title=\"Realtime Activity Monitor\"\n                    style={{\n                        margin: screens.xs ? '2px 0px' : '2px 16px',\n                        padding: screens.xs ? '4px 0px' : '4px',\n                    }}\n                    bodyStyle={{\n                        padding: screens.xs ? '4px' : '16px',\n                    }}\n                    headStyle={{\n                        padding: screens.xs ? '4px 6px' : '4px',\n                    }}\n                >\n                    <div style={{ padding: screens.xs ? '8px' : '16px' }}>\n                        <Select\n                            defaultValue={10}\n                            style={{ width: screens.xs ? '100%' : 120, margin: '16px 0' }}\n                            onChange={(value) => setLogSize(value)}\n                        >\n                            <Option value={10}>10 logs</Option>\n                            <Option value={20}>20 logs</Option>\n                            <Option value={50}>50 logs</Option>\n                            <Option value={100}>100 logs</Option>\n                        </Select>\n                        <div style={{ overflowX: 'auto' }}>\n                            <Table columns={columns} dataSource={logs} pagination={false} rowKey=\"Id\" />\n                        </div>\n                    </div>\n                </Card>\n            </Content>\n        </Layout>\n    );\n};\n\nexport default ActivityMonitor;"
    },
    {
      "path": "src\\pages\\AuditLogs.tsx",
      "content": "import React from 'react';\nimport { Tabs, Typography } from 'antd';\nimport ActivityMonitor from './ActivityMonitor';\nimport AuditLogsList from '@features/auditLogs/components/AuditLogsList';\n\nconst { TabPane } = Tabs;\n\nconst AuditLogs: React.FC = () => {\n    return (\n        <>\n        <Typography.Title level={2}>\n            Auditing\n        </Typography.Title>\n        <Tabs defaultActiveKey=\"1\">\n            <TabPane tab=\"Audit Logs\" key=\"1\" >\n                <AuditLogsList />\n            </TabPane>\n            <TabPane tab=\"Realtime Monitor\" key=\"2\">\n                <ActivityMonitor />\n            </TabPane>\n        </Tabs>\n        </>\n    );\n};\n\nexport default AuditLogs;"
    },
    {
      "path": "src\\pages\\Home.tsx",
      "content": "import { Flex, Grid, Typography } from 'antd';\n\n\nconst Home: React.FC = () => {\n    const screens = Grid.useBreakpoint();\n\n    return (\n        <Flex\n            gap=\"middle\"\n            vertical\n            style={{ padding: screens.xs ? '8px' : '16px' }}>\n            <Typography.Title level={2}>\n                Home Page for Registered User\n            </Typography.Title>\n        </Flex>\n    );\n};\n\nexport default Home;"
    },
    {
      "path": "src\\pages\\Landing.tsx",
      "content": "import { Flex, Grid, Typography } from \"antd\";\n\nconst Landing: React.FC = () => {\n    const screens = Grid.useBreakpoint();\n\n    return (\n        <Flex\n            gap=\"middle\"\n            vertical\n            style={{ padding: screens.xs ? '8px' : '16px' }}>\n            <Typography.Title level={2}>\n                Home Page for Unregistered User\n            </Typography.Title>\n            <Typography.Text type=\"secondary\">\n                Welcome to the Home page!\n            </Typography.Text>\n        </Flex>\n    );\n};\n\nexport default Landing;"
    },
    {
      "path": "src\\pages\\LoginPage.tsx",
      "content": "import Login from \"@components/Login\";\n\nconst LoginPage = () => {\n  return (\n    <Login />\n  );\n};\n\nexport default LoginPage;\n"
    },
    {
      "path": "src\\pages\\Profile.tsx",
      "content": "import { Card, Avatar, Flex } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport React, { useRef, useMemo, useContext, useEffect } from 'react';\nimport { useUpdateNotificationPreferencesMutation } from '@store/services/accountApi';\nimport { Switch, Button } from 'antd';\nimport { useState } from 'react';\nimport { Layout, Row, Col, Descriptions, Form, Typography } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@store/index';\nimport { MessageContext } from '@contexts/MessageContext';\n\nconst Profile: React.FC = () => {\n  const user = useSelector((state: RootState) => state.auth.user);\n  const [updatePreferences] = useUpdateNotificationPreferencesMutation();\n  const [preferences, setPreferences] = useState({\n    inAppNotification: false,\n    emailNotification: false,\n    pushNotification: false,\n  });\n\n  const initialPreferencesRef = useRef(preferences);\n  const messageApi = useContext(MessageContext);\n\n  useEffect(() => {\n    if (user?.notificationPreferences) {\n      const initialPrefs = {\n        inAppNotification: user.notificationPreferences.isInAppNotificationEnabled,\n        emailNotification: user.notificationPreferences.isEmailNotificationEnabled,\n        pushNotification: user.notificationPreferences.isPushNotificationEnabled,\n      };\n      setPreferences(initialPrefs);\n      initialPreferencesRef.current = initialPrefs;\n    }\n  }, [user]);\n\n  const isDirty = useMemo(() => {\n    return (\n      preferences.inAppNotification !== initialPreferencesRef.current.inAppNotification ||\n      preferences.emailNotification !== initialPreferencesRef.current.emailNotification ||\n      preferences.pushNotification !== initialPreferencesRef.current.pushNotification\n    );\n  }, [preferences]);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleToggle = (key: keyof typeof preferences) => (checked: boolean) => {\n    setPreferences({ ...preferences, [key]: checked });\n  };\n\n  const handleSubmit = async (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    try {\n      await updatePreferences(preferences).unwrap();\n      messageApi?.success('Notification preferences updated successfully.');\n    } catch {\n      messageApi?.error('Failed to update notification preferences.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!user) {\n    return <div>No user data available</div>;\n  }\n\n  const firstName = user.firstName?.value;\n  const lastName = user.lastName?.value;\n\n  return (\n    <>\n      <Layout style={{ background: 'transparent', padding: 0 }}>\n        <Layout.Content style={{ padding: 0, maxWidth: '1200px' }}>\n          <Typography.Title level={2} style={{ textAlign: 'left' }}>Profile Management</Typography.Title>\n          <Row gutter={[24, 24]}>\n            <Col xs={24} md={12}>\n              <Card>\n                <Flex vertical align=\"center\" style={{ marginBottom: 24 }}>\n                  <Avatar \n                    size={128}\n                    src={user.avatarUrl}\n                    icon={!user.avatarUrl && <UserOutlined />}\n                  />\n                </Flex>\n                <Typography.Title level={3} style={{ marginBottom: 16 }}>User Profile</Typography.Title>\n                <Descriptions bordered column={1}>\n                  <Descriptions.Item label=\"First Name\">{firstName}</Descriptions.Item>\n                  <Descriptions.Item label=\"Last Name\">{lastName}</Descriptions.Item>\n                  <Descriptions.Item label=\"Email\">{user.username}</Descriptions.Item>\n                  <Descriptions.Item label=\"Roles\">\n                    {user.roles?.map((role) => role.name).join(', ') || 'No roles assigned'}\n                  </Descriptions.Item>\n                </Descriptions>\n              </Card>\n            </Col>\n            <Col xs={24} md={12}>\n              <Card>\n                <Typography.Title level={3} style={{ marginBottom: 16 }}>Notification Settings</Typography.Title>\n                <Form layout=\"vertical\">\n                  <Row gutter={[0, 0]}>\n                    <Col span={24}>\n                      <Form.Item label=\"In-App Notifications\" valuePropName=\"checked\">\n                        <Switch\n                          checked={preferences.inAppNotification}\n                          onChange={handleToggle('inAppNotification')}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={24}>\n                      <Form.Item label=\"Email Notifications\" valuePropName=\"checked\">\n                        <Switch\n                          checked={preferences.emailNotification}\n                          onChange={handleToggle('emailNotification')}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={24}>\n                      <Form.Item label=\"Push Notifications\" valuePropName=\"checked\">\n                        <Switch\n                          checked={preferences.pushNotification}\n                          onChange={handleToggle('pushNotification')}\n                        />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Form.Item>\n                    <Button\n                      type=\"primary\"\n                      onClick={(event) => handleSubmit(event)}\n                      disabled={!isDirty}\n                      loading={isSubmitting}\n                    >\n                      Save Preferences\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Card>\n            </Col>\n          </Row>\n        </Layout.Content>\n      </Layout>\n    </>\n  );\n}\n\nexport default Profile;"
    },
    {
      "path": "src\\pages\\Roles.tsx",
      "content": "import RolesManagement from '@features/roles/components/RolesManagement';\n\nconst Roles: React.FC = () => <RolesManagement />\n\nexport default Roles;"
    },
    {
      "path": "src\\pages\\Settings.tsx",
      "content": "import { Typography } from \"antd\";\n\nconst Settings: React.FC = () => {\n\n  return (\n    <div>\n      <Typography.Title level={2}>\n        Settings\n      </Typography.Title>\n      {/* Add your settings content here */}\n    </div>\n  );\n}\n\nexport default Settings;"
    },
    {
      "path": "src\\pages\\Users.tsx",
      "content": "import React from 'react';\nimport UsersTable from '@features/users/components/UsersTable';\n\nconst Users: React.FC = () => <UsersTable />\n\nexport default Users;"
    },
    {
      "path": "src\\routes\\index.tsx",
      "content": "// src/AppRoutes.tsx\n\nimport { Routes, Route } from 'react-router-dom';\nimport Users from '@pages/Users';\nimport Roles from '@pages/Roles';\nimport Settings from '@pages/Settings';\nimport Profile from '@pages/Profile';\nimport { AuthCallback } from '@components/AuthCallback';\nimport ProtectedRoute from '@components/ProtectedRoute';\nimport { useSelector } from 'react-redux';\nimport type { RootState } from '@store/index';\nimport AuditLogs from '@pages/AuditLogs';\nimport Home from '@pages/Home';\nimport Landing from '@pages/Landing';\nimport loadedModules from '@src/modules/modulesLoader';\nimport type { ExtendedRouteObject } from '@/types/ExtendedRouteObject'; // Adjust the import path accordingly\nimport LoginPage from '@src/pages/LoginPage';\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport const ROLES = {\n  ADMIN: 'Admin',\n  EDITOR: 'Editor',\n  REGISTERED: 'Registered',\n} as const;\n\nfunction AppRoutes() {\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n\n  const staticRoutes: ExtendedRouteObject[] = [\n    {\n      path: '/',\n      element: isAuthenticated ? <Home /> : <Landing />,\n    },\n    {\n      path: '/login',\n      element: <LoginPage />,\n    },\n    {\n      path: '/auth/callback',\n      element: <AuthCallback />,\n    },\n    {\n      path: '/users',\n      element: (\n        <ProtectedRoute requiredRoles={[ROLES.ADMIN, ROLES.REGISTERED]}>\n          <Users />\n        </ProtectedRoute>\n      ),\n    },\n    {\n      path: '/roles',\n      element: (\n        <ProtectedRoute requiredRoles={[ROLES.ADMIN, ROLES.REGISTERED]}>\n          <Roles />\n        </ProtectedRoute>\n      ),\n    },\n    {\n      path: '/settings',\n      element: (\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      ),\n    },\n    {\n      path: '/profile',\n      element: (\n        <ProtectedRoute>\n          <Profile />\n        </ProtectedRoute>\n      ),\n    },\n    {\n      path: '/audit-logs',\n      element: (\n        <ProtectedRoute requiredRoles={[ROLES.ADMIN]}>\n          <AuditLogs />\n        </ProtectedRoute>\n      ),\n    },\n  ];\n\n  const moduleRoutes: ExtendedRouteObject[] = loadedModules.flatMap((mod) => mod.routes as ExtendedRouteObject[]);\n\n  const appRoutes: ExtendedRouteObject[] = [...staticRoutes, ...moduleRoutes];\n\n  return (\n    <Routes>\n      {appRoutes.map((route, i) => {\n        // Destructure requiredRoles from the route\n        const { requiredRoles, element, ...rest } = route;\n\n        // Determine the element to render\n        const routeElement = requiredRoles ? (\n          <ProtectedRoute requiredRoles={requiredRoles}>\n            {element}\n          </ProtectedRoute>\n        ) : (\n          element\n        );\n\n      // @ts-expect-error React Router typing issue\n      return <Route key={i} {...rest} element={routeElement} />;      \n      })}\n    </Routes>\n  );\n}\n\nexport default AppRoutes;\n"
    },
    {
      "path": "src\\services\\api.ts",
      "content": "const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;\n\ninterface UserInfo {\n  id: string;\n  email: string;\n  userName: string;\n  roles: string[];\n  avatarUrl?: string;\n  notificationPreference: {\n    isInAppNotificationEnabled: boolean;\n    isEmailNotificationEnabled: boolean;\n    isPushNotificationEnabled: boolean;\n  };\n}\n\nexport class ApiService {\n  static async fetchWithAuth<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      throw new Error(`API call failed: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  static async getCurrentUser(): Promise<UserInfo> {\n    return this.fetchWithAuth<UserInfo>('/Account/me');\n  }\n}"
    },
    {
      "path": "src\\services\\msalService.ts",
      "content": "import { PublicClientApplication, Configuration, AccountInfo } from '@azure/msal-browser';\nimport { loginRequest, tokenRequest } from '@config/msalConfig';\n\nconst msalConfig: Configuration = {\n  auth: {\n    clientId: import.meta.env.VITE_AZURE_AD_B2C_CLIENT_ID,\n    authority: import.meta.env.VITE_AZURE_AD_B2C_AUTHORITY,\n    redirectUri: import.meta.env.VITE_AZURE_AD_B2C_REDIRECT_URI,\n    knownAuthorities: [import.meta.env.VITE_AZURE_AD_B2C_DOMAIN],\n    postLogoutRedirectUri: window.location.origin,\n    navigateToLoginRequestUrl: true,\n  },\n  cache: {\n    cacheLocation: 'sessionStorage',\n    storeAuthStateInCookie: false,\n  },\n  system: {\n    allowRedirectInIframe: true,\n    loggerOptions: {\n      piiLoggingEnabled: false,\n    },\n  },\n};\n\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\nawait msalInstance.initialize();\n\nlet currentAccount: any = null;\nlet currentAccessToken: string | null = null;\n\nexport const getCurrentAccount = () => currentAccount;\nexport const getCurrentAccessToken = () => currentAccessToken;\n\nexport const login = async () => {\n  try {\n    const accounts = msalInstance.getAllAccounts();\n    if (accounts.length > 0) {\n      currentAccount = accounts[0];\n      const tokenResult = await acquireTokenSilent(currentAccount);\n      currentAccessToken = tokenResult.idToken;\n      return { account: currentAccount, accessToken: currentAccessToken };\n    }\n\n    await msalInstance.loginRedirect(loginRequest);\n    return null;\n  } catch (error) {\n    console.error('MSAL login error:', error);\n    throw error;\n  }\n};\n\nexport const handleRedirectResponse = async () => {\n  try {\n    const response = await msalInstance.handleRedirectPromise();\n    if (response) {\n      currentAccount = response.account;\n      const tokenResult = await acquireTokenSilent(currentAccount);\n      currentAccessToken = tokenResult.idToken;\n      return { account: currentAccount, accessToken: currentAccessToken };\n    }\n    return null;\n  } catch (error) {\n    console.error('Handle redirect error:', error);\n    throw error;\n  }\n};\n\nexport const acquireTokenSilent = async (account: AccountInfo) => {\n  tokenRequest.account = account;\n\n  try {\n    return await msalInstance.acquireTokenSilent(tokenRequest);\n  } catch (error) {\n    console.error('Silent token acquisition failed, attempting popup:', error);\n    return await msalInstance.acquireTokenPopup(tokenRequest);\n  }\n};\n\nexport const logoutUser = async () => {\n  try {\n    await msalInstance.logoutRedirect();\n  } catch (error: any) {\n    console.error('Logout error:', error);\n    throw error;\n  }\n};"
    },
    {
      "path": "src\\store\\api.ts",
      "content": "import { createApi, fetchBaseQuery, FetchBaseQueryError } from '@reduxjs/toolkit/query/react';\nimport type { BaseQueryFn, FetchArgs } from '@reduxjs/toolkit/query';\n\nconst baseQuery = fetchBaseQuery({\n  baseUrl: import.meta.env.VITE_API_BASE_URL,\n  credentials: 'include', // ensures cookies are sent on every request\n  prepareHeaders: async (headers) => {\n    const xsrfToken = localStorage.getItem('xsrfToken');\n    if (xsrfToken) {\n      headers.set('X-XSRF-TOKEN', xsrfToken);\n    }\n    return headers;\n  },\n});\n\nconst baseQueryWithReauth: BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError> = async (\n  args,\n  api,\n  extraOptions\n) => {\n  const result = await baseQuery(args, api, extraOptions);\n\n  if (result.error) {\n    console.error('API Error:', {\n      status: result.error.status,\n      data: result.error.data,\n      url: typeof args === 'string' ? args : args.url,\n    });\n  }\n\n  if (result.error && result.error.status === 401) {\n    // Optionally, trigger a reauthentication flow\n  }\n\n  return result;\n};\n\nexport const api = createApi({\n  baseQuery: baseQueryWithReauth,\n  tagTypes: ['Users', 'AuditLogs', 'Notifications', 'Roles', 'Permissions', 'Contents', 'Media', 'SEO'],\n  endpoints: () => ({}),\n});\n"
    },
    {
      "path": "src\\store\\hooks.ts",
      "content": "import { useDispatch } from 'react-redux'\nimport type { AppDispatch } from '@store/index'\nimport { userApi } from './services/userApi';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const { useGetNotificationsQuery } = userApi;"
    },
    {
      "path": "src\\store\\index.ts",
      "content": "import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { api } from './api';\nimport authReducer from '@store/slices/authSlice';\nimport uiReducer from '@store/slices/uiSlice';\nimport loadedModules from '@src/modules/modulesLoader';\n\nexport const store = configureStore({\n  reducer: {\n    [api.reducerPath]: api.reducer,\n    auth: authReducer,\n    ui: uiReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(api.middleware),\n});\n\nloadedModules.forEach((mod) => {\n  if (mod.initStore) {\n    mod.initStore();\n  }\n});\n\nsetupListeners(store.dispatch);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;"
    },
    {
      "path": "src\\store\\services\\accountApi.ts",
      "content": "import { api } from '@store/api';\nimport type { RegisterUser } from '@/types/registerUser';\nimport { UserInfo } from '@/types/user';\nimport type { LoginRequest } from '@/types/loginRequest';\n\nexport const accountApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    getCurrentUser: builder.query<UserInfo, void>({\n      query: () => '/Account/me',\n      providesTags: ['Users'],\n    }),\n    login: builder.mutation<void, LoginRequest>({\n      query: (credentials) => ({\n        url: '/Account/login',\n        method: 'POST',\n        body: credentials,\n      }),\n    }),\n    register: builder.mutation<void, RegisterUser>({\n      query: (user) => ({\n        url: '/Account/register',\n        method: 'POST',\n        body: user,\n      }),\n      invalidatesTags: ['Users'],\n    }),\n    updateNotificationPreferences: builder.mutation<\n      void,\n      { inAppNotification: boolean; emailNotification: boolean; pushNotification: boolean }\n    >({\n      query: (preferences) => ({\n        url: '/Account/me/notifications',\n        method: 'PATCH',\n        body: preferences,\n      }),\n      invalidatesTags: ['Users'],\n    }),\n    logout: builder.mutation<void, void>({\n      query: () => ({\n        url: '/Account/logout',\n        method: 'POST',\n      }),\n      invalidatesTags: ['Users'],\n    }),\n  }),\n});\n\nexport const {\n  useLoginMutation,\n  useGetCurrentUserQuery,\n  useRegisterMutation,\n  useUpdateNotificationPreferencesMutation,\n  useLogoutMutation,\n  useLazyGetCurrentUserQuery,\n} = accountApi;\n"
    },
    {
      "path": "src\\store\\services\\auditLogApi.ts",
      "content": "import { api } from '@store/api';\nimport type { PaginatedResponse } from '@/types/paginatedResponse';\nimport type { AuditLog } from '@/types/auditLog';\nimport type { DynamicQuery } from '@/types/dynamicQuery';\n\nexport const auditLogApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    getAuditLogs: builder.query<PaginatedResponse<AuditLog>, { pageIndex: number; pageSize: number }>({\n      query: ({ pageIndex, pageSize }) => ({\n        url: 'auditlogs',\n        params: { pageIndex, pageSize }\n      }),\n      providesTags: ['AuditLogs']\n    }),\n    getAuditLogsDynamic: builder.query<PaginatedResponse<AuditLog>, DynamicQuery>({\n      query: (params) => ({\n        url: 'auditlogs/dynamic',\n        method: 'POST',\n        params: {\n          pageIndex: params.pageIndex,\n          pageSize: params.pageSize\n        },\n        body: {\n          sort: params.sort,\n          filter: params.filter\n        }\n      }),\n      providesTags: ['AuditLogs'],\n    }),\n  }),\n});\n\nexport const { useGetAuditLogsQuery, useGetAuditLogsDynamicQuery } = auditLogApi;\n"
    },
    {
      "path": "src\\store\\services\\permissionApi.ts",
      "content": "import { api } from '@store/api';\nimport type { Role } from '@/types/role';\nimport type { PaginatedResponse } from '@/types/paginatedResponse';\n\nexport const permissionApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    getRoles: builder.query<PaginatedResponse<Role>, { pageIndex: number; pageSize: number }>({\n      query: ({ pageIndex, pageSize }) => ({\n        url: '/roles',\n        params: {\n          pageIndex,\n          pageSize\n        },\n      }),\n    }),\n    updateUserRole: builder.mutation<void, {\n      userId: string;\n      roleId: string;\n      operation: 'Add' | 'Remove';\n    }>({\n      query: ({ userId, roleId, operation }) => ({\n        url: `/users/${userId}/roles`,\n        method: 'POST',\n        body: {\n          operation,\n          roleId,\n        },\n      }),\n      invalidatesTags: ['Users'],\n    }),\n  }),\n});\n\nexport const { useGetRolesQuery, useUpdateUserRoleMutation } = permissionApi; "
    },
    {
      "path": "src\\store\\services\\roleApi.ts",
      "content": "import { api } from '@store/api';\nimport type { Role } from '@/types/role';\nimport type { RoleWithPermissions } from '@/types/role';\nimport type { PaginatedResponse } from '@/types/paginatedResponse';\n\n\nexport const roleApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    getRoles: builder.query<PaginatedResponse<Role>, { pageIndex: number; pageSize: number }>({\n      query: ({ pageIndex, pageSize }) => ({\n        url: '/roles',\n        params: { pageIndex, pageSize }\n      }),\n      providesTags: ['Roles']\n    }),\n    \n    getRoleDetails: builder.query<RoleWithPermissions, string>({\n      query: (roleId) => `/roles/${roleId}`,\n      providesTags: ['Roles']\n    }),\n    \n    getPermissions: builder.query<PaginatedResponse<Permissions>, { pageIndex: number; pageSize: number }>({\n      query: ({ pageIndex, pageSize }) => ({\n        url: '/permissions',\n        params: { pageIndex, pageSize }\n      }),\n      providesTags: ['Permissions']\n    }),\n    \n    updateRolePermission: builder.mutation<void, {\n      roleId: string;\n      permissionId: string;\n      operation: 'Add' | 'Remove';\n    }>({\n      query: ({ roleId, permissionId, operation }) => ({\n        url: `/roles/${roleId}/permissions`,\n        method: 'PATCH',\n        body: {\n          permissionId,\n          operation,\n        },\n      }),\n      invalidatesTags: ['Roles'],\n    }),\n    \n    createRole: builder.mutation<Role, { name: string }>({\n      query: (body) => ({\n        url: '/roles',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Roles']\n    }),\n    \n    deleteRole: builder.mutation<void, string>({\n      query: (roleId) => ({\n        url: `/roles/${roleId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Roles']\n    }),\n    \n    updateRoleName: builder.mutation<void, {\n      roleId: string;\n      name: string;\n    }>({\n      query: ({ roleId, name }) => ({\n        url: `/roles/${roleId}/name`,\n        method: 'PATCH',\n        body: { name },\n      }),\n      invalidatesTags: ['Roles'],\n    }),\n  }),\n});\n\nexport const {\n  useGetRolesQuery,\n  useGetRoleDetailsQuery,\n  useGetPermissionsQuery,\n  useUpdateRolePermissionMutation,\n  useCreateRoleMutation,\n  useDeleteRoleMutation,\n  useUpdateRoleNameMutation,\n} = roleApi; "
    },
    {
      "path": "src\\store\\services\\userApi.ts",
      "content": "import { api } from '@store/api';\nimport type { UserInfo } from '@/types/user';\nimport type { PaginatedResponse } from '@/types/paginatedResponse';\nimport type { DynamicQuery } from '@/types/dynamicQuery';\nimport type { NotificationResponse } from '@/types/notification';\n\nexport const userApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    getUsers: builder.query<PaginatedResponse<UserInfo>, { pageIndex: number; pageSize: number }>({\n      query: ({ pageIndex, pageSize }) => ({\n        url: 'users',\n        params: {\n          pageIndex,\n          pageSize\n        },\n      }),\n      providesTags: ['Users'],\n    }),\n    getUserDetails: builder.query<UserInfo, string>({\n      query: (userId) => `users/${userId}`,\n      providesTags: ['Users'],\n    }),\n    updateUserRole: builder.mutation<void, {\n      userId: string;\n      roleId: string;\n      operation: 'Add' | 'Remove';\n    }>({\n      query: ({ userId, roleId, operation }) => ({\n        url: `users/${userId}/roles`,\n        method: 'PATCH',\n        body: {\n          operation,\n          roleId,\n        },\n      }),\n      invalidatesTags: ['Users'],\n    }),\n    getUsersDynamic: builder.query<PaginatedResponse<UserInfo>, DynamicQuery>({\n      query: ({ pageIndex, pageSize, sort, filter }) => ({\n        url: `users/dynamic`,\n        method: 'POST',\n        params: {\n          pageIndex,\n          pageSize,\n        },\n        body: {\n          sort,\n          filter,\n        },\n      }),\n      providesTags: ['Users'],\n    }),\n    getUsersByRole: builder.query<PaginatedResponse<UserInfo>, { \n      roleId: string; \n      pageIndex: number; \n      pageSize: number;\n    }>({\n      query: ({ roleId, pageIndex, pageSize }) => ({\n        url: `users/roles/${roleId}`,\n        params: {\n          pageIndex,\n          pageSize,\n        },\n      }),\n      providesTags: ['Users'],\n    }),\n    getNotifications: builder.query<NotificationResponse, { pageIndex: number; pageSize: number }>({\n      query: ({ pageIndex, pageSize }) => ({\n        url: 'notifications',\n        params: {\n          pageIndex,\n          pageSize\n        },\n      }),\n      providesTags: ['Notifications'],\n    }),\n    markNotificationsRead: builder.mutation<void, void>({\n      query: () => ({\n        url: 'notifications/read',\n        method: 'PATCH',\n      }),\n      invalidatesTags: ['Notifications'],\n    }),\n  }),\n  overrideExisting: true,\n}).enhanceEndpoints({\n  addTagTypes: ['Users', 'AuditLogs', 'Notifications'],\n});\n\nexport const { \n  useGetUsersQuery, \n  useGetUserDetailsQuery,\n  useUpdateUserRoleMutation,\n  useGetUsersDynamicQuery,\n  useGetUsersByRoleQuery,\n  useGetNotificationsQuery,\n  useMarkNotificationsReadMutation\n} = userApi;"
    },
    {
      "path": "src\\store\\slices\\authSlice.ts",
      "content": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { UserInfo } from '@/types/user';\nimport type { NotificationPreference } from '@/types/notification';\n\nexport type ExtendedAccountInfo = UserInfo;\n\ninterface AuthState {\n  isAuthenticated: boolean;\n  user: ExtendedAccountInfo | null;\n  accessToken: string;\n  error: string | null;\n}\n\nconst initialState: AuthState = { \n  isAuthenticated: false,\n  user: null,\n  accessToken: '',\n  error: null,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    loginSuccess: (state, action: PayloadAction<{ account: ExtendedAccountInfo | null; accessToken: string }>) => {\n      state.isAuthenticated = true;\n      state.user = action.payload.account;\n      state.accessToken = action.payload.accessToken;\n      state.error = null;\n    },\n    loginFailure: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n    },\n    logoutSuccess: (state) => {\n      state.isAuthenticated = false;\n      state.user = null;\n      state.accessToken = '';\n      state.error = null;\n    },\n    logoutFailure: (state) => {\n      state.error = 'Failed to logout';\n    },\n  },\n});\n\nexport const { loginSuccess, loginFailure, logoutSuccess, logoutFailure } = authSlice.actions;\nexport default authSlice.reducer;\n"
    },
    {
      "path": "src\\store\\slices\\uiSlice.ts",
      "content": "import { createSlice } from '@reduxjs/toolkit';\nimport { Notification } from '@/types/notification';\n\ninterface UiState {\n  isLoading: boolean;\n  isUserLoading: boolean;\n  isDarkMode: boolean;\n  notificationCount: number;\n  notifications: Notification[];\n}\n\nconst initialState: UiState = {\n  isLoading: false,\n  isUserLoading: false,\n  isDarkMode: false,\n  notificationCount: 0,\n  notifications: [],\n};\n\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    setLoading: (state, action: { payload: boolean }) => {\n      state.isLoading = action.payload;\n    },\n    setUserLoading: (state, action: { payload: boolean }) => {\n      state.isUserLoading = action.payload;\n    },\n    toggleDarkMode: (state) => {\n      state.isDarkMode = !state.isDarkMode;\n    },\n    setNotificationCount: (state, action: { payload: number }) => {\n      state.notificationCount = action.payload;\n    },\n    setNotifications: (state, action: { payload: Notification[] }) => {\n      state.notifications = action.payload;\n      state.notificationCount = state.notifications.filter(n => !n.isRead).length;\n    },\n    addNotification: (state, action: { payload: Notification }) => {\n      state.notifications.unshift(action.payload);\n      if (!action.payload.isRead) {\n        state.notificationCount += 1;\n      }\n    },\n    resetNotificationCount: (state) => {\n      state.notificationCount = 0;\n      state.notifications.forEach(notification => {\n        notification.isRead = true;\n      });\n    }\n  },\n});\n\nexport const {\n  setLoading,\n  setUserLoading,\n  toggleDarkMode,\n  setNotificationCount,\n  setNotifications,\n  addNotification,\n  resetNotificationCount,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;"
    },
    {
      "path": "src\\types\\auditLog.ts",
      "content": "export interface AuditLog {\n  id: string;\n  user: string;\n  action: string;\n  entity: string;\n  entityId: string;\n  timestamp: string;\n  details: string;\n}\n"
    },
    {
      "path": "src\\types\\dynamicQuery.ts",
      "content": "\nexport interface SortDescriptor {\n    field: string;\n    dir: string;\n  }\n  \n  export interface FilterDescriptor {\n    field?: string;\n    operator?: string;\n    value?: string;\n    logic?: string;\n    filters?: FilterDescriptor[];\n    isCaseSensitive?: boolean;\n  }\n  \nexport interface DynamicQuery {\n    sort?: SortDescriptor[];\n    filter?: FilterDescriptor;\n    pageIndex: number;\n    pageSize: number;\n  }"
    },
    {
      "path": "src\\types\\errorResponse.ts",
      "content": "export type ErrorResponse = {\n    data?: {\n        message?: string;\n        title?: string;\n        errors?: string[];\n    };\n};"
    },
    {
      "path": "src\\types\\ExtendedRouteObject.ts",
      "content": "// src/types/ExtendedRouteObject.ts\n\nimport { RouteObject } from 'react-router-dom';\nimport { Role } from '@constants/role'; // Adjust the import path accordingly\n\n/**\n * Extends the RouteObject interface to include requiredRoles.\n */\nexport type ExtendedRouteObject = RouteObject & {\n  /**\n   * Specifies the roles required to access the route.\n   * If omitted, the route is accessible to all authenticated users.\n   */\n  requiredRoles?: Role[];\n};\n"
    },
    {
      "path": "src\\types\\loginRequest.ts",
      "content": "export interface LoginRequest {\n    loginIdentifier: string;\n    password: string;\n    rememberMe: boolean;\n  }"
    },
    {
      "path": "src\\types\\notification.ts",
      "content": "import { PaginatedResponse } from \"./paginatedResponse\";\n\nexport interface Notification {\n    id: string;\n    action: string;\n    entity: string;\n    entityId: string;\n    timestamp: string;\n    details: string;\n    isRead: boolean;\n}\n\nexport interface NotificationPreference {\n    isInAppNotificationEnabled: boolean;\n    isEmailNotificationEnabled: boolean;\n    isPushNotificationEnabled: boolean;\n}\n\nexport interface NotificationResponse {\n  paginatedNotifications: PaginatedResponse<Notification>;\n  unreadCount: number;\n}"
    },
    {
      "path": "src\\types\\paginatedResponse.ts",
      "content": "\nexport interface PaginatedResponse<T> {\n  items: T[];\n  pageIndex: number;\n  pageSize: number;\n  totalPages: number;\n  totalCount: number;\n  hasPreviousPage: boolean;\n  hasNextPage: boolean;\n}"
    },
    {
      "path": "src\\types\\permission.ts",
      "content": "export interface Permission {\n  id: string;\n  feature: string;\n  name: string;\n}\n"
    },
    {
      "path": "src\\types\\registerUser.ts",
      "content": "export interface RegisterUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    confirmPassword: string;\n}\n"
    },
    {
      "path": "src\\types\\role.ts",
      "content": "import { Permission } from \"./permission\";\n\nexport interface Role {\n    id: string;\n    name: string;\n    isDefault: boolean;\n  }\n\n  export interface RoleWithPermissions {\n    id: string;\n    name: string;\n    isDefault: boolean;\n    permissions?: Permission[];\n  }"
    },
    {
      "path": "src\\types\\user.ts",
      "content": "import { NotificationPreference } from \"./notification\";\nimport { Role } from \"./role\";\nimport { ValueObject } from \"./valueObject\";\n\nexport interface UserInfo {\n  id: string;\n  email: ValueObject<string>;\n  firstName: ValueObject<string>;\n  lastName: ValueObject<string>;\n  roles: Role[];\n  avatarUrl?: string;\n  notificationPreference: NotificationPreference;\n}"
    },
    {
      "path": "src\\types\\valueObject.ts",
      "content": "export interface ValueObject<T> {\n    value: T;\n  }"
    },
    {
      "path": "src\\utils\\dateFormatter.ts",
      "content": "import { format } from 'date-fns';\n\nexport const formatDate = (date: Date | string, dateFormat: string = 'yyyy-MM-dd HH:mm:ss') => {\n  return format(new Date(date), dateFormat);\n};\n\nexport default formatDate;"
    },
    {
      "path": "src\\utils\\formatSize.ts",
      "content": "export const formatSize = (size: number): string => {\n    if (size < 1024) return `${size} B`;\n    if (size < 1024 * 1024) return `${(size / 1024).toFixed(2)} KB`;\n    return `${(size / (1024 * 1024)).toFixed(2)} MB`;\n  };"
    }
  ]
}